*----------------------------------------------------------------------*
* Program Id:     ZVENDOR_OUTBOUND_EXTRACT                             *
* Program Title:  Pollenware – Interface for extracting vendor outbound*
*                 details                                              *
* Program Type:   Report                                               *
* Author:         Avinash Ravipati, Advent Global Solutions            *
* SAP Release:    ECC 6.0                                              *
* CR No:                                                               *
* Date:           12/04/2011                                           *
* Description:    This program is to extract vendor payments and create*
*                 a formatted CSV flat file as output and placing at   *
*                 FTP location                                         *
*                 In addition to the payment details,vendor master data*
*                 and vendor contact details extracted to two different*
*                 CSV flat files.                                      *
*----------------------------------------------------------------------*
* CHANGE LOG                                                           *
* CR Number       Date                                Author           *
*----------------------------------------------------------------------*

REPORT  zvendor_outbound_extract MESSAGE-ID zpollenware.

* Include for data declarations.
INCLUDE zvendor_outbound_extract_top.

*----------------------------------------------------------------------*
*  EVENT  INITIALIZATION                                               *
*----------------------------------------------------------------------*

INITIALIZATION.

* getting timestamp.
  PERFORM extract_startup.

* validating user authorization to execute outbound extract.
  PERFORM validate_user_authorization.

* getting quickpay config details.
  PERFORM fetch_config_details.

*----------------------------------------------------------------------*
*  EVENT  AT SELECTION-SCREEN                                          *
*----------------------------------------------------------------------*

AT SELECTION-SCREEN.

* validatinh user input
  PERFORM validate_input.

* validating user input vendor number.
  PERFORM validate_vendor_number.

*----------------------------------------------------------------------*
*  EVENT  AT SELECTION-SCREEN OUTPUT                                   *
*----------------------------------------------------------------------*

AT SELECTION-SCREEN OUTPUT.

* modifing the selection screen based on quickpay configuration.
  PERFORM modify_screen.

*----------------------------------------------------------------------*
*  EVENT  AT SELECTION-SCREEN ON VALUE-REQUEST                         *
*----------------------------------------------------------------------*

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_dpath.

* f4 help to set the path to write the files
  PERFORM browse_for_path.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR s_pterm-low.
  PERFORM zterm_help_low.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR s_pterm-high.
  PERFORM zterm_help_high.


*----------------------------------------------------------------------*
*  EVENT  START-OF-SELECTION                                           *
*----------------------------------------------------------------------*

START-OF-SELECTION.

* filling vendors range table checking balances from lfc1
  PERFORM fill_vendors_by_balance.

* extracting vendor payment details.
  PERFORM fetch_vendor_payments.

* extracting vendor master details.
  PERFORM fetch_vendor_master.

* extracting vendor contact details.
  PERFORM fetch_vendor_contacts.

* formatting vendor outbound data.
  PERFORM format_outbound_data.

* converting vendor payment data to CSV format.
  PERFORM convert_outbound_to_csv USING gt_payments_outbound
                               CHANGING gt_payments_csv.

* converting vendor master data to CSV format.
  PERFORM convert_outbound_to_csv USING gt_vendor_outbound
                               CHANGING gt_vendor_csv.

* converting vendor contacts data to CSV format.
  PERFORM convert_outbound_to_csv USING gt_contacts_outbound
                               CHANGING gt_contacts_csv.
*----------------------------------------------------------------------*
*  EVENT  END-OF-SELECTION                                             *
*----------------------------------------------------------------------*

END-OF-SELECTION.

* creating CSV flat files.
  PERFORM create_csv_flat_file.

* creating extract process LOG file.
  PERFORM create_log_file.

* LOG file on Application Server.
  PERFORM create_appserver_log.

* Saving the selection inputs for next background execution.
  PERFORM save_selection_inputs.

*----------------------------------------------------------------------*
*  Form  VALIDATE_USER_AUTHORIZATION                                   *
*----------------------------------------------------------------------*
*  Subroutine for validating user authorization to execute outbound    *
*  extract.                                                            *
*----------------------------------------------------------------------*
*  There are no interface parameters to be passed on to the subroutine.*
*----------------------------------------------------------------------*
FORM validate_user_authorization.

* Local work variables declarations.....................................
  DATA:
   lv_string TYPE string.               " String

  AUTHORITY-CHECK OBJECT 'ZVEND_OUTB' FOR USER sy-uname
                      ID 'ACTVT' FIELD '01'.

  CLEAR gs_process_details.

  IF sy-subrc NE 0.
    lv_string = text-uaf.
    REPLACE ALL OCCURRENCES OF c_p1
                            IN lv_string
                          WITH sy-uname.

* filling the process details for extract log
    PERFORM fill_process_details USING lv_string.
    CLEAR lv_string.
    gv_status = text-fua.

* LOG file on Application Server.
    PERFORM create_appserver_log.

    MESSAGE i000.
    LEAVE PROGRAM.
  ELSE.
    lv_string = text-uas.
    REPLACE ALL OCCURRENCES OF c_p1
                            IN lv_string
                          WITH sy-uname.
* filling the process details for extract log
    PERFORM fill_process_details USING lv_string.
    CLEAR lv_string.
  ENDIF.                               " IF SY_SUBRC NE 0.

ENDFORM.                               " VALIDATE_USER_AUTHORIZATION.

*----------------------------------------------------------------------*
*  Form  VALIDATE_VENDOR_NUMBER                                        *
*----------------------------------------------------------------------*
*  Subroutine for validating user input vendor number.                 *
*----------------------------------------------------------------------*
*  There are no interface parameters to be passed on to the subroutine.*
*----------------------------------------------------------------------*
FORM validate_vendor_number.

  SELECT COUNT( * )
    FROM lfb1
   WHERE lifnr IN s_vendor.

  IF sy-subrc NE 0.
* filling the process details for extract log
    PERFORM fill_process_details USING text-vni.
    gv_status = text-fvn.
    MESSAGE e001.
  ELSE.
    IF s_vendor IS NOT INITIAL.
* filling the process details for extract log
      PERFORM fill_process_details USING text-vns.
    ENDIF.                             " IF NOT S_VENDOR
  ENDIF.                               " IF SY-SUBRC NE 0.

ENDFORM.                               " VALIDATE_VENDOR_NUMBER.

*----------------------------------------------------------------------*
*  Form  FETCH_VENDOR_PAYMENTS                                         *
*----------------------------------------------------------------------*
*  Subroutine for extracting vendor payment details.                   *
*----------------------------------------------------------------------*
*  There are no interface parameters to be passed on to the subroutine.*
*----------------------------------------------------------------------*
FORM fetch_vendor_payments.

  DATA lt_vendor_payments TYPE STANDARD TABLE
                           OF typ_vendor_payments.

  DATA:
    lv_bukrs TYPE bkpf-bukrs,
    lv_lifnr TYPE lfb1-lifnr.

  CLEAR gt_vendor_payments.

  PERFORM fill_inputs_background.

  IF gv_last_date IS INITIAL AND
     gv_last_time IS INITIAL.

    SELECT b~lifnr                     " Acct Num of Vendor or Creditor
           b~xblnr                     " Reference Document Number
           b~wrbtr                     " Amount
           b~bldat                     " Document Date
           b~belnr                     " Accounting Document Number
           b~zlsch                     " Payment Method
           b~zterm                     " Terms of Payment Key
           b~sgtxt                     " Item Text
           b~blart                     " Document Type
           b~rebzg                     " Num of the Inv the Tran Belong
           b~prctr                     " Profit Center
           b~landl                     " Supplying Country
           b~waers                     " Currecny key
           b~zfbdt                     " Baseline Date for Due Date Cal
           b~zbd1t                     " Cash discount days 1
           b~hbkid                     " Short Key for a House Bank
           b~hktid                     " ID for account details
           b~bukrs
           b~gjahr
      INTO TABLE gt_vendor_payments
      FROM ( bkpf AS a INNER JOIN bsik AS b
                  ON a~bukrs EQ b~bukrs
                 AND a~belnr EQ b~belnr
                 AND a~gjahr EQ b~gjahr )
     WHERE b~bukrs IN s_ccode
       AND b~lifnr IN gr_vendor
       AND b~belnr IN s_dnum
       AND b~budat IN s_date
       AND b~zterm IN s_pterm
       AND b~zlsch IN s_pmetd
       AND b~augbl EQ space
       AND b~zlspr EQ space
       AND b~shkzg EQ 'H'.
  ELSE.

    SELECT b~lifnr                       " Acct Num of Vendor or Creditor
           b~xblnr                       " Reference Document Number
           b~wrbtr                       " Amount
           b~bldat                       " Document Date
           b~belnr                       " Accounting Document Number
           b~zlsch                       " Payment Method
           b~zterm                       " Terms of Payment Key
           b~sgtxt                       " Item Text
           b~blart                       " Document Type
           b~rebzg                       " Num of the Inv the Tran Belong
           b~prctr                       " Profit Center
           b~landl                       " Supplying Country
           b~waers                       " Currecny key
           b~zfbdt                       " Baseline Date for Due Date Cal
           b~zbd1t                       " Cash discount days 1
           b~hbkid                       " Short Key for a House Bank
           b~hktid                       " ID for account details
           b~bukrs
           b~gjahr
      INTO TABLE gt_vendor_payments
      FROM ( bkpf AS a INNER JOIN bsik AS b
                  ON a~bukrs EQ b~bukrs
                 AND a~belnr EQ b~belnr
                 AND a~gjahr EQ b~gjahr )
     WHERE b~lifnr IN gr_vendor
       AND b~bukrs IN s_ccode
       AND b~belnr IN s_dnum
       AND a~cpudt GE gv_last_date
       AND a~cpudt LE gv_to_date
       AND a~cputm GE gv_last_time
       AND a~cputm LE gv_to_time
       AND b~zterm IN s_pterm
       AND b~zlsch IN s_pmetd
       AND b~augbl EQ space
       AND b~zlspr EQ space
       AND b~shkzg EQ 'H'.

  ENDIF.                               " IF SY-SUBRC NE 0.

  IF sy-subrc NE 0.
* filling the process details for extract log
    PERFORM fill_process_details USING text-ntf.
    gv_status = text-fpd.

* creating LOG file on Application Server.
    PERFORM create_appserver_log.

    MESSAGE i002.
    LEAVE PROGRAM.
  ELSE.

* filling the payment terms details for all entries of vendor payments
    PERFORM fill_pterms_details.
* filling the document type description for all entries of vend. paymts.
    PERFORM fill_doctype_desc.
* filling the process details for extract log
    PERFORM fill_process_details USING text-pes.
  ENDIF.                               " IF SY-SUBRC NE 0.

ENDFORM.                               " FETCH_VENDOR_PAYMENTS.

*----------------------------------------------------------------------*
*  Form  FETCH_VENDOR_MASTER                                           *
*----------------------------------------------------------------------*
*  This Subroutine is for extracting vendor master details.            *
*----------------------------------------------------------------------*
*  There are no interface parameters to be passed on to the subroutine.*
*----------------------------------------------------------------------*
FORM fetch_vendor_master.

  SELECT a~lifnr                       " Acct Num of Vendor or Creditor
         b~date_from                   " Valid-from date
         b~nation                      " International add version ID
         a~name1                                            " Name 1
         a~regio                       " Region(State,Province,County)
         a~adrnr                       " Address
         b~street                      " Street
         b~str_suppl1                                       " Street2
         b~str_suppl2                                       " Street3
         b~str_suppl3                                       " Street4
         b~location                                         " Street5
         a~ort01                       " City
         a~pstlz                       " P.O. Box Postal Code
         a~land1                       " Country Key
         a~ktokk                       " Vendor account group
    INTO TABLE gt_vendor_details
    FROM ( lfa1 AS a
              LEFT OUTER JOIN adrc AS b
                ON a~adrnr EQ b~addrnumber )
    FOR ALL ENTRIES IN gt_vendor_payments
    WHERE a~lifnr EQ gt_vendor_payments-lifnr.

  IF sy-subrc EQ 0.
* filling the email address details for all entries of vendor details.
    PERFORM fill_email_details.
* filling the region details for all entries of vendor details.
    PERFORM fill_region_details.
* filling the vendor group details for all entries of vendor details.
    PERFORM fill_vendor_group_details.
* filling the process details for extract log.
    PERFORM fill_process_details USING text-mes.

  ENDIF.                               " IF SY-SUBRC EQ 0.

ENDFORM.                               " FETCH_VENDOR_MASTER.

*----------------------------------------------------------------------*
*  Form  FETCH_VENDOR_CONTACTS                                         *
*----------------------------------------------------------------------*
*  This Subroutine is for extracting vendor contact details.           *
*----------------------------------------------------------------------*
*  There are no interface parameters to be passed on to the subroutine.*
*----------------------------------------------------------------------*
FORM fetch_vendor_contacts .

  SELECT a~lifnr                       " Vendor Number
         a~parnr                       " Number of contact person
         a~prsnr                       " Person Number
         b~date_from                   " Valid-from date
         b~nation                      " International add version ID
         b~tel_number                  " Telephone
         b~region                      " Region
    INTO TABLE gt_vendor_contacts
    FROM ( knvk  AS a
               LEFT OUTER JOIN adrc AS b
                 ON a~adrnd EQ b~addrnumber )
 FOR ALL ENTRIES IN gt_vendor_payments
              WHERE a~lifnr EQ gt_vendor_payments-lifnr.

  IF sy-subrc EQ 0.
* filling the person's name details for all entries of vendor contacts.
    PERFORM fill_contacts_names.
* filling the process details for extract log
    PERFORM fill_process_details USING text-ces.
  ENDIF.                               " IF SY-SUBRC EQ 0.

ENDFORM.                               " FETCH_VENDOR_CONTACTS.

*----------------------------------------------------------------------*
*  Form  FORMAT_OUTBOUND_DATA                                          *
*----------------------------------------------------------------------*
*  Subroutine for formatting vendor outbound data                      *
*----------------------------------------------------------------------*
*  There are no interface parameters to be passed on to the subroutine.*
*----------------------------------------------------------------------*
FORM format_outbound_data .

* Local work variables..................................................
  DATA:
    lv_duedt TYPE bsik-zfbdt,          " Due Date
    lv_tel_number TYPE char30,         " Telephone number
    lv_adrnd TYPE knvk-adrnd,          " Business address
    lv_date_from TYPE adrc-date_from,  " Valid-from date
    lv_nation TYPE adrc-nation.        " International add version ID

  CLEAR:
    gs_vendor_payments,
    gs_vendor_details,
    gs_vendor_contacts.

  concatenation text-ven gs_payments_outbound-lifnr.
  concatenation text-irn gs_payments_outbound-xblnr.
  concatenation text-pdd gs_payments_outbound-budat.
  concatenation text-amt gs_payments_outbound-wrbtr.
  concatenation text-ddt gs_payments_outbound-bldat.
  concatenation text-dnm gs_payments_outbound-belnr.
  concatenation text-pym gs_payments_outbound-zlsch.
  concatenation text-pyt gs_payments_outbound-zterm.
  concatenation text-dtt gs_payments_outbound-sgtxt.
  concatenation text-dty gs_payments_outbound-ltext.
  concatenation text-oin gs_payments_outbound-rebzg.
  concatenation text-pcn gs_payments_outbound-prctr.
  concatenation text-tst gs_payments_outbound-trast.
  concatenation text-mdt gs_payments_outbound-loevm.
  concatenation text-cky gs_payments_outbound-waers.
  concatenation text-hbk gs_payments_outbound-hbank.
  concatenation text-cf1 gs_payments_outbound-cf1.
  concatenation text-cf2 gs_payments_outbound-cf2.
  concatenation text-cf3 gs_payments_outbound-cf3.
  concatenation text-cf4 gs_payments_outbound-cf4.
  concatenation text-cf5 gs_payments_outbound-cf5.
  concatenation text-gid gs_payments_outbound-gid.

  APPEND gs_payments_outbound TO gt_payments_outbound.

  concatenation text-ven gs_vendor_outbound-lifnr.
  concatenation text-vn1 gs_vendor_outbound-name1.
  concatenation text-reg gs_vendor_outbound-bezei.
  concatenation text-str gs_vendor_outbound-street.
  concatenation text-st2 gs_vendor_outbound-str_suppl1.
  concatenation text-vcc gs_vendor_outbound-land1.
  concatenation text-cit gs_vendor_outbound-ort01.
  concatenation text-pos gs_vendor_outbound-pstlz.
  concatenation text-mdt gs_vendor_outbound-loevm.
  concatenation text-vgp gs_vendor_outbound-ktokk.
  concatenation text-cf1 gs_vendor_outbound-cf1.
  concatenation text-cf2 gs_vendor_outbound-cf2.
  concatenation text-cf3 gs_vendor_outbound-cf3.
  concatenation text-cf4 gs_vendor_outbound-cf4.
  concatenation text-cf5 gs_vendor_outbound-cf5.
  concatenation text-rpe gs_vendor_outbound-rper.
  concatenation text-ram gs_vendor_outbound-ramt.

  APPEND gs_vendor_outbound TO gt_vendor_outbound.

  concatenation text-ven gs_contacts_outbound-lifnr.
  concatenation text-fnm gs_contacts_outbound-name_first.
  concatenation text-lnm gs_contacts_outbound-name_last.
  concatenation text-tel gs_contacts_outbound-tel_number.
  concatenation text-eid gs_contacts_outbound-smtp_addr.
  concatenation text-reg gs_contacts_outbound-region.

  APPEND gs_contacts_outbound TO gt_contacts_outbound.

  LOOP AT gt_vendor_payments INTO gs_vendor_payments.

    CLEAR:
      lv_duedt,
      gs_payments_outbound.

    lv_duedt = gs_vendor_payments-zfbdt + gs_vendor_payments-zbd1t.
    gs_payments_outbound-budat = lv_duedt.

    IF sy-datum LT lv_duedt.
      gs_payments_outbound-trast = text-ntd.
    ELSEIF sy-datum EQ lv_duedt.
      gs_payments_outbound-trast = text-due.
    ELSE.
      gs_payments_outbound-trast = text-ovd.
    ENDIF.                             " IF SY-DATUM LT LV_DUEDT.


    concatenation gs_vendor_payments-lifnr gs_payments_outbound-lifnr.
    concatenation gs_vendor_payments-xblnr gs_payments_outbound-xblnr.

* converting the date format from YYYYMMDD to MM/DD/YYYY.
    PERFORM change_date_format CHANGING gs_payments_outbound-budat.

    gs_payments_outbound-wrbtr = gs_vendor_payments-wrbtr.
    gs_payments_outbound-bldat = gs_vendor_payments-bldat.

* converting the date format from YYYYMMDD to MM/DD/YYYY.
    PERFORM change_date_format CHANGING gs_payments_outbound-bldat.
    concatenation gs_vendor_payments-belnr gs_payments_outbound-belnr.

    IF gs_vendor_payments-zlsch NE space.

      READ TABLE gt_vendor_details
       ASSIGNING <gs_vendor_details>
  WITH TABLE KEY lifnr = gs_vendor_payments-lifnr.

      SELECT SINGLE
             text1                     " Name of Payment Method
        INTO gs_payments_outbound-zlsch
        FROM t042z
       WHERE land1 EQ <gs_vendor_details>-land1
         AND zlsch EQ gs_vendor_payments-zlsch.

    ENDIF.                             " IF ZLSCH NE SPACE.

    concatenation gs_payments_outbound-zlsch gs_payments_outbound-zlsch.

    IF gs_payments_outbound-zlsch CA c_comma.
* Replacing commas with space character.
      PERFORM replace_comma_with_space
                              CHANGING gs_payments_outbound-zlsch.
    ENDIF.                             " IF ZLSCH CA C_COMMA.

    READ TABLE gt_pterms_details
WITH TABLE KEY spras = sy-langu
               zterm = gs_vendor_payments-zterm
     ASSIGNING <gs_pterms_details>.

    gs_payments_outbound-zterm = <gs_pterms_details>-text1.

    concatenation gs_payments_outbound-zterm gs_payments_outbound-zterm.

    IF gs_payments_outbound-zterm CA c_comma.
* Replacing commas with space character.
      PERFORM replace_comma_with_space
                              CHANGING gs_payments_outbound-zterm.
    ENDIF.                             " IF ZTERM CA C_COMMA.

    concatenation gs_vendor_payments-sgtxt gs_payments_outbound-sgtxt.

    IF gs_payments_outbound-sgtxt CA c_comma.
* Replacing commas with space character.
      PERFORM replace_comma_with_space
                              CHANGING gs_payments_outbound-sgtxt.
    ENDIF.                             " IF SGTXT CA C_COMMA.

    READ TABLE gt_doctype_desc
WITH TABLE KEY spras = sy-langu
               blart = gs_vendor_payments-blart
     ASSIGNING <gs_doctype_desc>.

    gs_payments_outbound-ltext = <gs_doctype_desc>-ltext.

    concatenation gs_payments_outbound-ltext gs_payments_outbound-ltext.

    IF gs_payments_outbound-ltext CA c_comma.
* Replacing commas with space character.
      PERFORM replace_comma_with_space
                              CHANGING gs_payments_outbound-ltext.
    ENDIF.                             " IF LTEXT CA C_C0MMA.

    concatenation gs_vendor_payments-rebzg gs_payments_outbound-rebzg.

    IF gs_payments_outbound-rebzg CA c_comma.
* Replacing commas with space character.
      PERFORM replace_comma_with_space
                            CHANGING gs_payments_outbound-rebzg.
    ENDIF.                             " IF REBZG CA C_COMMA.
    concatenation gs_vendor_payments-prctr gs_payments_outbound-prctr.

    IF gs_payments_outbound-prctr CA c_comma.
* Replacing commas with space character.
      PERFORM replace_comma_with_space
                            CHANGING gs_payments_outbound-prctr.
    ENDIF.                             " IF PRCTR CA C_COMMA.
    concatenation gs_payments_outbound-trast gs_payments_outbound-trast.
    IF gs_payments_outbound-trast CA c_comma.
* Replacing commas with space character.
      PERFORM replace_comma_with_space
                            CHANGING gs_payments_outbound-trast.
    ENDIF.                             " IF TRAST CA C_COMMA.

    gs_payments_outbound-loevm = c_yes.
    concatenation gs_payments_outbound-loevm gs_payments_outbound-loevm.
    concatenation gs_vendor_payments-waers gs_payments_outbound-waers.
    concatenation gs_payments_outbound-cf1 gs_payments_outbound-cf1.
    concatenation gs_payments_outbound-cf2 gs_payments_outbound-cf2.
    concatenation gs_payments_outbound-cf3 gs_payments_outbound-cf3.
    concatenation gs_payments_outbound-cf4 gs_payments_outbound-cf4.
    concatenation gs_payments_outbound-cf5 gs_payments_outbound-cf5.
    concatenation gs_payments_outbound-gid gs_payments_outbound-gid.

    CONCATENATE gs_vendor_payments-hbkid
                gs_vendor_payments-hktid
           INTO gs_payments_outbound-hbank
   SEPARATED BY space.

    concatenation gs_payments_outbound-hbank gs_payments_outbound-hbank.


    APPEND gs_payments_outbound TO gt_payments_outbound.

  ENDLOOP.                             " LOOP AT GT_VENDOR_PAYMENTS...

  LOOP AT gt_vendor_details INTO gs_vendor_details.
    CLEAR gs_vendor_outbound.

    concatenation gs_vendor_details-lifnr gs_vendor_outbound-lifnr.
    concatenation gs_vendor_details-name1 gs_vendor_outbound-name1.
    IF gs_vendor_outbound-name1 CA c_comma.
* Replacing commas with space character
      PERFORM replace_comma_with_space
                            CHANGING gs_vendor_outbound-name1.
    ENDIF.                             " IF NAME1 CA C_COMMA.

    READ TABLE gt_vendor_region_details
WITH TABLE KEY spras = sy-langu
               land1 = gs_vendor_details-land1
               bland = gs_vendor_details-regio
     ASSIGNING <gs_vendor_region_details>.
    IF sy-subrc EQ 0.
      gs_vendor_outbound-bezei = <gs_vendor_region_details>-bezei.
    ENDIF.

    concatenation gs_vendor_outbound-bezei gs_vendor_outbound-bezei.
    IF gs_vendor_outbound-bezei CA c_comma.
* Replacing commas with space character
      PERFORM replace_comma_with_space
                            CHANGING gs_vendor_outbound-bezei.
    ENDIF.                             " IF BEZEI CA C_COMMA.
    concatenation gs_vendor_details-street gs_vendor_outbound-street.
    IF gs_vendor_outbound-street CA c_comma.
* Replacing commas with space character
      PERFORM replace_comma_with_space
                            CHANGING gs_vendor_outbound-street.
    ENDIF.                             " IF STREET CA C_COMMA.

    CONCATENATE gs_vendor_details-str_suppl1
                gs_vendor_details-str_suppl2
                gs_vendor_details-str_suppl3
                gs_vendor_details-location
           INTO gs_vendor_outbound-str_suppl1 SEPARATED BY space.

    concatenation gs_vendor_outbound-str_suppl1
                  gs_vendor_outbound-str_suppl1.
    IF gs_vendor_outbound-str_suppl1 CA c_comma.
* Replacing commas with space character
      PERFORM replace_comma_with_space
                              CHANGING gs_vendor_outbound-str_suppl1.
    ENDIF.                             " IF STR_SUPPL1 CA C_COMMA.
    concatenation gs_vendor_details-ort01 gs_vendor_outbound-ort01.
    IF gs_vendor_outbound-ort01 CA c_comma.
* Replacing commas with space character
      PERFORM replace_comma_with_space
                              CHANGING gs_vendor_outbound-ort01.
    ENDIF.                             " IF ORT01 CA C_COMMA.
    concatenation gs_vendor_details-pstlz gs_vendor_outbound-pstlz.
* Replacing commas with space character
    IF gs_vendor_outbound-pstlz CA c_comma.
      PERFORM replace_comma_with_space
                              CHANGING gs_vendor_outbound-pstlz.
    ENDIF.                             " IF PSTLZ CA C_COMMA.

    IF gs_vendor_details-land1 EQ space.
      gs_vendor_details-land1 = c_us_code.
    ENDIF.                             " IF LAND1 EQ SPACE.

    concatenation gs_vendor_details-land1 gs_vendor_outbound-land1.
    gs_vendor_outbound-loevm = c_yes.
    concatenation gs_vendor_outbound-loevm gs_vendor_outbound-loevm.

    READ TABLE gt_vendor_group_desc
WITH TABLE KEY spras = sy-langu
               ktokk = gs_vendor_details-ktokk
     ASSIGNING <gs_vendor_group_desc>.

    gs_vendor_outbound-ktokk = <gs_vendor_group_desc>-txt30.

    concatenation gs_vendor_outbound-ktokk gs_vendor_outbound-ktokk.
    IF gs_vendor_outbound-ktokk CA c_comma.
* Replacing commas with space character
      PERFORM replace_comma_with_space
                              CHANGING gs_vendor_outbound-ktokk.
    ENDIF.                             " IF KTOKK CA C_COMMA.
    CLEAR:
      gs_email_details.
    concatenation gs_vendor_outbound-cf1 gs_vendor_outbound-cf1.
    concatenation gs_vendor_outbound-cf2 gs_vendor_outbound-cf2.
    concatenation gs_vendor_outbound-cf3 gs_vendor_outbound-cf3.
    concatenation gs_vendor_outbound-cf4 gs_vendor_outbound-cf4.
    concatenation gs_vendor_outbound-cf5 gs_vendor_outbound-cf5.
    concatenation gs_vendor_outbound-rper gs_vendor_outbound-rper.
    concatenation gs_vendor_outbound-ramt gs_vendor_outbound-ramt.

    APPEND gs_vendor_outbound TO gt_vendor_outbound.

  ENDLOOP.                             " LOOP AT GT_VENDOR_DETAILS...

  LOOP AT gt_vendor_contacts INTO gs_vendor_contacts.
    CLEAR:
      lv_date_from,
      lv_nation,
      gs_contacts_outbound.

    READ TABLE gt_vendor_details
     ASSIGNING <gs_vendor_details>
WITH TABLE KEY lifnr = gs_vendor_contacts-lifnr.

    SELECT SINGLE
           adrnd                       " Address Number
      INTO lv_adrnd
      FROM knvk
     WHERE parnr EQ gs_vendor_contacts-parnr.

    IF lv_adrnd IS NOT INITIAL.

      concatenation gs_vendor_contacts-lifnr gs_contacts_outbound-lifnr.

      READ TABLE gt_contacts_names
  WITH TABLE KEY persnumber = gs_vendor_contacts-prsnr
                 date_from = gs_vendor_contacts-date_from
                 nation = gs_vendor_contacts-nation
       ASSIGNING <gs_contacts_names>.

      gs_contacts_outbound-name_first = <gs_contacts_names>-name_first.
      gs_contacts_outbound-name_last = <gs_contacts_names>-name_last.

      READ TABLE gt_email_details
        WITH KEY persnumber = gs_vendor_contacts-prsnr
        INTO gs_email_details.

      gs_contacts_outbound-smtp_addr = gs_email_details-smtp_addr.
      CLEAR:
        gs_email_details.

      concatenation gs_contacts_outbound-name_first
                    gs_contacts_outbound-name_first.

      IF gs_contacts_outbound-name_first CA c_comma.
* Replacing commas with space character
        PERFORM replace_comma_with_space
                              CHANGING gs_contacts_outbound-name_first.
      ENDIF.                           " IF NAME_FIRST CA C_COMMA.

      concatenation gs_contacts_outbound-name_last
                    gs_contacts_outbound-name_last.
      IF gs_contacts_outbound-name_last CA c_comma.
* Replacing commas with space character
        PERFORM replace_comma_with_space
                              CHANGING gs_contacts_outbound-name_last.
      ENDIF.                           " IF NAME_LAST CA C_COMMA.

      lv_tel_number = gs_vendor_contacts-tel_number.

      concatenation lv_tel_number
                    gs_contacts_outbound-tel_number.
      IF gs_contacts_outbound-tel_number CA c_comma.
* Replacing commas with space character
        PERFORM replace_comma_with_space
                              CHANGING gs_contacts_outbound-tel_number.
      ENDIF.                           " IF TEL_NUMBER CA C_COMMA.
      concatenation gs_contacts_outbound-smtp_addr
                    gs_contacts_outbound-smtp_addr.
      SELECT SINGLE
             bezei                     " State, Region
        INTO gs_contacts_outbound-region
        FROM t005u
       WHERE spras EQ sy-langu
         AND land1 EQ <gs_vendor_details>-land1
         AND bland EQ gs_vendor_contacts-region.

      concatenation gs_contacts_outbound-region
                    gs_contacts_outbound-region.
      IF gs_contacts_outbound-region CA c_comma.
* Replacing commas with space character
        PERFORM replace_comma_with_space
                              CHANGING gs_contacts_outbound-region.
      ENDIF.                           " IF REGION CA C_COMMA.

      APPEND gs_contacts_outbound TO gt_contacts_outbound.

    ELSE.

      concatenation gs_vendor_contacts-lifnr gs_contacts_outbound-lifnr.

      READ TABLE gt_email_details
        WITH KEY persnumber = gs_vendor_contacts-prsnr
            INTO gs_email_details.

      gs_contacts_outbound-smtp_addr = gs_email_details-smtp_addr.
      CLEAR:
        gs_email_details.

      concatenation gs_contacts_outbound-smtp_addr
                    gs_contacts_outbound-smtp_addr.
      SELECT SINGLE
             region                    " State
             date_from                 " Valid-from date
             nation                    " International add version ID
        INTO (gs_vendor_contacts-region,
              lv_date_from,
              lv_nation)
        FROM adrc
       WHERE addrnumber EQ <gs_vendor_details>-adrnr
         AND date_from EQ <gs_vendor_details>-date_from
         AND nation EQ <gs_vendor_details>-nation.

      SELECT SINGLE
             name_first                " First Name
             name_last                 " Last Name
        INTO (gs_contacts_outbound-name_first,
              gs_contacts_outbound-name_last)
        FROM adrp
       WHERE persnumber = gs_vendor_contacts-prsnr
         AND date_from  = lv_date_from
         AND nation = lv_nation.

      concatenation gs_contacts_outbound-name_first
                    gs_contacts_outbound-name_first.
      IF gs_contacts_outbound-name_first CA c_comma.
* Replacing commas with space character
        PERFORM replace_comma_with_space
                              CHANGING gs_contacts_outbound-name_first.
      ENDIF.                           " IF NAME_FIRST CA C_COMMA.
      concatenation gs_contacts_outbound-name_last
                    gs_contacts_outbound-name_last.
      IF gs_contacts_outbound-name_last CA c_comma.
* Replacing commas with space character
        PERFORM replace_comma_with_space
                              CHANGING gs_contacts_outbound-name_last.
      ENDIF.                           " IF NAME_LAST CA C_COMMA.

      SELECT SINGLE
             bezei
        INTO gs_contacts_outbound-region
        FROM t005u                     " Region (State, Province)
       WHERE spras EQ sy-langu
         AND land1 EQ <gs_vendor_details>-land1
         AND bland EQ gs_vendor_contacts-region.

      concatenation gs_contacts_outbound-region
                    gs_contacts_outbound-region.
      IF gs_contacts_outbound-region CA c_comma.
* Replacing commas with space character
        PERFORM replace_comma_with_space
                              CHANGING gs_contacts_outbound-region.
      ENDIF.                           " IF REGION CA C_COMMA.
      APPEND gs_contacts_outbound TO gt_contacts_outbound.

    ENDIF.                             " IF SY-SUBRC EQ 0.

  ENDLOOP.                             " LOOP AT GT_VENDOR_CONTACTS...

ENDFORM.                               " FORMAT_OUTBOUND_DATA.

*----------------------------------------------------------------------*
*  Form  CONVERT_OUTBOUND_TO_CSV                                       *
*----------------------------------------------------------------------*
*  This Subroutine is for converting internal table data to CSV format *
*----------------------------------------------------------------------*
*  --> it_sap_data - formatted data                                    *
*  <-- ct_csv_data - data in csv format                                *
*----------------------------------------------------------------------*
FORM convert_outbound_to_csv USING it_sap_data TYPE STANDARD TABLE
                          CHANGING ct_csv_data TYPE truxs_t_text_data.

  CALL FUNCTION 'SAP_CONVERT_TO_TEX_FORMAT'
    EXPORTING
      i_field_seperator          = ','
*     I_LINE_HEADER              =
*     I_FILENAME                 =
*     I_APPL_KEEP                = ' '
    TABLES
      i_tab_sap_data             = it_sap_data
    CHANGING
      i_tab_converted_data       = ct_csv_data.

ENDFORM.                               " CONVERT_OUTBOUND_TO_CSV.

*----------------------------------------------------------------------*
*  Form  CREATE_CSV_FLAT_FILE                                          *
*----------------------------------------------------------------------*
*  Subroutine for creating CSV flat files on PC                        *
*----------------------------------------------------------------------*
*  There are no interface parameters to be passed on to the subroutine.*
*----------------------------------------------------------------------*
FORM create_csv_flat_file.

* Local work variables..................................................
  DATA:
    lv_filename TYPE string,           " File name
    lv_length TYPE i,                  " Length
    lv_char TYPE char1,                " Character
    lv_slash TYPE char1,               " Slash type in path
    lv_text TYPE string,               " Text string
    lv_ftp_path TYPE string,           " FTP path
    lv_aflag TYPE char1 VALUE c_flag_off,
                                       " App server flag
    lv_dflag TYPE char1 VALUE c_flag_off,
                                       " Desktop server flag
    lv_fflag TYPE char1 VALUE c_flag_off,
                                       " FTP flag
    lv_apayment_flag TYPE char1 VALUE c_flag_off,
                                       " APP vendor payment file flag
    lv_adetails_flag TYPE char1 VALUE c_flag_off,
                                       " APP vendor master file flag
    lv_acontacts_flag TYPE char1 VALUE c_flag_off,
                                       " APP vendor contacts file flag
    lv_dpayment_flag TYPE char1 VALUE c_flag_off,
                                       " Desktop vendor payment flag
    lv_ddetails_flag TYPE char1 VALUE c_flag_off,
                                       " Desktop vendor master flag
    lv_dcontacts_flag TYPE char1 VALUE c_flag_off,
                                       " Desktop vendor contacts flag
    lv_fpayment_flag TYPE char1 VALUE c_flag_off,
                                       " FTP vendor payment file flag
    lv_fdetails_flag TYPE char1 VALUE c_flag_off,
                                       " FTP vendor master file flag
    lv_fcontacts_flag TYPE char1       " FTP vendor contacts file flag
                   VALUE c_flag_off.

  CONCATENATE gv_vp_filename
              gv_ts_date
              c_underscore
              gv_ts_time
              c_dot
              c_csv_extension
         INTO gv_vp_filename.

  CONCATENATE gv_vm_filename
              gv_ts_date
              c_underscore
              gv_ts_time
              c_dot
              c_csv_extension
         INTO gv_vm_filename.

  CONCATENATE gv_vc_filename
              gv_ts_date
              c_underscore
              gv_ts_time
              c_dot
              c_csv_extension
         INTO gv_vc_filename.

  IF gv_desk EQ c_flag_on.

    lv_length = STRLEN( p_dpath ).
    lv_length = lv_length - 1.
    lv_char = p_dpath+lv_length(1).

    IF p_dpath CA c_farw_slash.
      lv_slash = c_farw_slash.
    ELSE.
      lv_slash = c_back_slash.
    ENDIF.                             " IF P_DPATH CA C_FARW_SLASH.

    IF lv_char EQ lv_slash.
      CONCATENATE p_dpath
                  gv_vp_filename
             INTO lv_filename.
    ELSE.
      CONCATENATE p_dpath
                  lv_slash
                  gv_vp_filename
             INTO lv_filename.
    ENDIF.                             " IF LV_CHAR EQ LV_SLASH.
* creating vendor payment csv file in desktop
    PERFORM write_to_frontend USING gt_payments_csv
                                    lv_filename
                           CHANGING lv_dpayment_flag.

    CLEAR lv_filename.

    IF lv_char EQ lv_slash.
      CONCATENATE p_dpath
                  gv_vm_filename
             INTO lv_filename.
    ELSE.
      CONCATENATE p_dpath
                  lv_slash
                  gv_vm_filename
             INTO lv_filename.
    ENDIF.                             " IF LV_CHAR EQ LV_SLASH.
* creating vendor master csv file in desktop
    PERFORM write_to_frontend USING gt_vendor_csv
                                    lv_filename
                           CHANGING lv_ddetails_flag.
    CLEAR lv_filename.

    IF lv_char EQ lv_slash.
      CONCATENATE p_dpath
                  gv_vc_filename
             INTO lv_filename.
    ELSE.
      CONCATENATE p_dpath
                  lv_slash
                  gv_vc_filename
             INTO lv_filename.
    ENDIF.                             " IF LV_CHAR EQ LV_SLASH.
* creating vendor contacts csv file in desktop
    PERFORM write_to_frontend USING gt_contacts_csv
                                    lv_filename
                           CHANGING lv_dcontacts_flag.
    CLEAR lv_filename.

    IF lv_dpayment_flag EQ c_flag_on AND
       lv_ddetails_flag EQ c_flag_on AND
      lv_dcontacts_flag EQ c_flag_on.

      lv_dflag = c_flag_on.

    ELSE.
      lv_dflag = c_flag_off.
      gv_download_flag = c_flag_off.

    ENDIF.                             " IF LV_PAYMENT_FLAG EQ c_flag_on

  ENDIF.                               " IF GV_DESK EQ C_FLAG_ON.

  IF gv_as EQ c_flag_on OR
     gv_ftp EQ c_flag_on.
* creating vendor payments csv file in application server
    PERFORM create_file_appserver USING gt_payments_csv
                                        gv_vp_filename
                               CHANGING gv_vp_fullpath
                                        lv_apayment_flag.

* creating vendor master csv file in application server
    PERFORM create_file_appserver USING gt_vendor_csv
                                        gv_vm_filename
                               CHANGING gv_vm_fullpath
                                        lv_adetails_flag.

* creating vendor contacts csv file in application server
    PERFORM create_file_appserver USING gt_contacts_csv
                                        gv_vc_filename
                               CHANGING gv_vc_fullpath
                                        lv_acontacts_flag.
    IF lv_apayment_flag EQ c_flag_on AND
       lv_adetails_flag EQ c_flag_on AND
      lv_acontacts_flag EQ c_flag_on.

      lv_aflag = c_flag_on.

    ELSE.
      lv_aflag = c_flag_off.
      gv_download_flag = c_flag_off.

    ENDIF.                             " IF LV_PAYMENT_FLAG EQ c_flag_on

  ENDIF.                               " IF GV_AS eq C_FLAG_ON ...

  IF gv_ftp EQ c_flag_on.
* getting password encryption string.
    PERFORM password_encryption.
* creating vendor payment csv file to ftp location.
    PERFORM file_create_ftp USING gv_vp_fullpath
                                  gv_vp_filename
                         CHANGING lv_fpayment_flag.
* creating vendor master csv file to ftp location.
    PERFORM file_create_ftp USING gv_vm_fullpath
                                  gv_vm_filename
                         CHANGING lv_fdetails_flag.
* creating vendor contacts csv file to ftp location.
    PERFORM file_create_ftp USING gv_vc_fullpath
                                  gv_vc_filename
                         CHANGING lv_fcontacts_flag.

    IF lv_fpayment_flag EQ c_flag_on AND
       lv_fdetails_flag EQ c_flag_on AND
      lv_fcontacts_flag EQ c_flag_on.

      lv_fflag = c_flag_on.

    ELSE.
      lv_fflag = c_flag_off.
      gv_download_flag = c_flag_off.

    ENDIF.                             " IF LV_PAYMENT_FLAG EQ c_flag_on

  ENDIF.                               " IF GV_FTP EQ C_FLAG_ON.

  IF gv_as NE c_flag_on AND gv_ftp EQ c_flag_on.
* deleting the vendor payment csv file from app server
    PERFORM delete_file_from_app USING gv_vp_fullpath.
* deleting the vendor master csv file from app server
    PERFORM delete_file_from_app USING gv_vm_fullpath.
* deleting the vendor contacts csv file from app server
    PERFORM delete_file_from_app USING gv_vc_fullpath.
  ENDIF.                               " IF GV_AS NE C_FLAG_ON ...

  IF gv_desk EQ c_flag_on AND
     gv_as EQ c_flag_off AND
     gv_ftp EQ c_flag_off.

    IF lv_dflag EQ c_flag_on.
      lv_text = text-nnd.
      CONCATENATE lv_text
                  p_dpath
             INTO lv_text SEPARATED BY space.
      CONCATENATE lv_text
                  c_dot
             INTO lv_text.
* filling the process details for extract log.
      PERFORM fill_process_details USING lv_text.
      CLEAR lv_text.
    ELSE.
      lv_text = text-ffd.
      REPLACE ALL OCCURRENCES OF c_p1
                              IN lv_text
                            WITH p_dpath.
* filling the process details for extract log.
      PERFORM fill_process_details USING lv_text.
      CLEAR lv_text.
    ENDIF.                             " IF LV_DFLAG EQ C_FLAG_ON.

  ELSEIF gv_desk EQ c_flag_off AND
         gv_as EQ c_flag_on AND
         gv_ftp EQ c_flag_off.

    IF lv_aflag EQ c_flag_on.

      lv_text = text-nna.
      CONCATENATE lv_text
                  gv_as_path
             INTO lv_text SEPARATED BY space.
      CONCATENATE lv_text
                  c_dot
             INTO lv_text.
* filling the process details for extract log.
      PERFORM fill_process_details USING lv_text.
      CLEAR lv_text.
    ELSE.
      lv_text = text-ffa.
      REPLACE ALL OCCURRENCES OF c_p1
                              IN lv_text
                            WITH gv_as_path.
* filling the process details for extract log.
      PERFORM fill_process_details USING lv_text.
      CLEAR lv_text.
    ENDIF.                             " if lv_aflag EQ c_flag_on

  ELSEIF gv_desk EQ c_flag_off AND
         gv_as EQ c_flag_off AND
         gv_ftp EQ c_flag_on.

    IF lv_fflag EQ c_flag_on.

      lv_text = text-nnf.
      CONCATENATE lv_text
                  c_ftp_p
             INTO lv_text SEPARATED BY space.
      IF gv_ftp_dir IS INITIAL.
        CONCATENATE lv_text
                    gv_host
                    c_farw_slash
               INTO lv_text.
      ELSE.
        CONCATENATE lv_text
                    gv_host
                    c_farw_slash
                    gv_ftp_dir
                    c_farw_slash
               INTO lv_text.
      ENDIF.                           " IF GV_FTP_DIR IS INITIAL.

* filling the process details for extract log.
      PERFORM fill_process_details USING lv_text.
      CLEAR lv_text.

    ELSE.

      lv_text = text-fff.
      IF gv_ftp_dir IS  INITIAL.
        CONCATENATE c_ftp_p
                    gv_host
                    c_farw_slash
               INTO lv_ftp_path.
      ELSE.
        CONCATENATE c_ftp_p
                    gv_host
                    c_farw_slash
                    gv_ftp_dir
                    c_farw_slash
               INTO lv_ftp_path.
      ENDIF.                           " IF GV_FTP_DIR IS INITIAL.
      REPLACE ALL OCCURRENCES OF c_p1
                              IN lv_text
                            WITH lv_ftp_path.
* filling the process details for extract log.
      PERFORM fill_process_details USING lv_text.
      CLEAR lv_text.
    ENDIF.                             " IF LV_FFLAG EQ C_FLAG_ON.

  ELSEIF gv_desk EQ c_flag_on AND
         gv_as EQ c_flag_on AND
         gv_ftp EQ c_flag_off.

    IF lv_dflag EQ c_flag_on AND
       lv_aflag EQ c_flag_on.

      lv_text = text-nda.
      REPLACE ALL OCCURRENCES OF c_p1
                              IN lv_text
                            WITH p_dpath.
      REPLACE ALL OCCURRENCES OF c_p2
                              IN lv_text
                            WITH gv_as_path.
* filling the process details for extract log.
      PERFORM fill_process_details USING lv_text.
      CLEAR lv_text.
    ELSE.
      lv_text = text-fda.
      REPLACE ALL OCCURRENCES OF c_p1
                              IN lv_text
                            WITH p_dpath.
      REPLACE ALL OCCURRENCES OF c_p2
                              IN lv_text
                            WITH gv_as_path.
* filling the process details for extract log.
      PERFORM fill_process_details USING lv_text.
      CLEAR lv_text.
    ENDIF.                             " IF LV_DFLAG EQ C_FLAG_ON ...
  ELSEIF gv_desk EQ c_flag_on AND
          gv_as EQ c_flag_off AND
          gv_ftp EQ c_flag_on.

    IF lv_dflag EQ c_flag_on AND
       lv_fflag EQ c_flag_on.

      IF gv_ftp_dir IS INITIAL.
        CONCATENATE c_ftp_p
                    gv_host
                    c_farw_slash
               INTO lv_ftp_path.
      ELSE.
        CONCATENATE c_ftp_p
                    gv_host
                    c_farw_slash
                    gv_ftp_dir
                    c_farw_slash
               INTO lv_ftp_path.
      ENDIF.                           " IF GV_FTP_DIR IS INITIAL.
      lv_text = text-ndf.
      REPLACE ALL OCCURRENCES OF c_p1
                              IN lv_text
                            WITH p_dpath.
      REPLACE ALL OCCURRENCES OF c_p2
                              IN lv_text
                            WITH lv_ftp_path.
* filling the process details for extract log.
      PERFORM fill_process_details USING lv_text.
      CLEAR:
       lv_text,
       lv_ftp_path.
    ELSE.
      IF gv_ftp_dir IS INITIAL.
        CONCATENATE c_ftp_p
                    gv_host
                    c_farw_slash
               INTO lv_ftp_path.
      ELSE.
        CONCATENATE c_ftp_p
                    gv_host
                    c_farw_slash
                    gv_ftp_dir
                    c_farw_slash
               INTO lv_ftp_path.
      ENDIF.                           " IF GV_FTP_DIR IS INITIAL.
      lv_text = text-fdf.
      REPLACE ALL OCCURRENCES OF c_p1
                              IN lv_text
                            WITH p_dpath.
      REPLACE ALL OCCURRENCES OF c_p2
                              IN lv_text
                            WITH lv_ftp_path.
* filling the process details for extract log.
      PERFORM fill_process_details USING lv_text.
      CLEAR:
       lv_text,
       lv_ftp_path.
    ENDIF.                             " IF LV_DFLAG EQ C_FLAG_ON ...
  ELSEIF gv_desk EQ c_flag_off AND
          gv_as EQ c_flag_on AND
          gv_ftp EQ c_flag_on.
    IF lv_aflag EQ c_flag_on AND
       lv_fflag EQ c_flag_on.
      IF gv_ftp_dir IS INITIAL.
        CONCATENATE c_ftp_p
                    gv_host
                    c_farw_slash
               INTO lv_ftp_path.
      ELSE.
        CONCATENATE c_ftp_p
                    gv_host
                    c_farw_slash
                    gv_ftp_dir
                    c_farw_slash
               INTO lv_ftp_path.
      ENDIF.                           " IF GV_FTP_DIR IS INITIAL.
      lv_text = text-naf.
      REPLACE ALL OCCURRENCES OF c_p1
                              IN lv_text
                            WITH gv_as_path.
      REPLACE ALL OCCURRENCES OF c_p2
                              IN lv_text
                            WITH lv_ftp_path.
* filling the process details for extract log.
      PERFORM fill_process_details USING lv_text.
      CLEAR:
       lv_text,
       lv_ftp_path.
    ELSE.
      IF gv_ftp_dir IS INITIAL.
        CONCATENATE c_ftp_p
                    gv_host
                    c_farw_slash
               INTO lv_ftp_path.
      ELSE.
        CONCATENATE c_ftp_p
                    gv_host
                    c_farw_slash
                    gv_ftp_dir
                    c_farw_slash
               INTO lv_ftp_path.
      ENDIF.                           " IF GV_FTP_DIR IS INITIAL.
      lv_text = text-faf.
      REPLACE ALL OCCURRENCES OF c_p1
                              IN lv_text
                            WITH gv_as_path.
      REPLACE ALL OCCURRENCES OF c_p2
                              IN lv_text
                            WITH lv_ftp_path.
* filling the process details for extract log.
      PERFORM fill_process_details USING lv_text.
      CLEAR:
       lv_text,
       lv_ftp_path.
    ENDIF.                             " IF LV_DFLAG EQ C_FLAG_ON ...
  ELSEIF gv_desk EQ c_flag_on AND
          gv_as EQ c_flag_on AND
          gv_ftp EQ c_flag_on.

    IF lv_dflag EQ c_flag_on AND
       lv_fflag EQ c_flag_on AND
       lv_aflag EQ c_flag_on.

      IF gv_ftp_dir IS INITIAL.
        CONCATENATE c_ftp_p
                    gv_host
                    c_farw_slash
               INTO lv_ftp_path.
      ELSE.
        CONCATENATE c_ftp_p
                    gv_host
                    c_farw_slash
                    gv_ftp_dir
                    c_farw_slash
               INTO lv_ftp_path.
      ENDIF.                           " IF GV_FTP_DIR IS INITIAL.

      lv_text = text-adf.
      REPLACE ALL OCCURRENCES OF c_p1
                              IN lv_text
                            WITH p_dpath.
      REPLACE ALL OCCURRENCES OF c_p2
                              IN lv_text
                            WITH gv_as_path.
      REPLACE ALL OCCURRENCES OF c_p3
                              IN lv_text
                            WITH lv_ftp_path.
* filling the process details for extract log.
      PERFORM fill_process_details USING lv_text.
      CLEAR:
       lv_text,
       lv_ftp_path.
    ELSE.
      IF gv_ftp_dir IS INITIAL.
        CONCATENATE c_ftp_p
                    gv_host
                    c_farw_slash
               INTO lv_ftp_path.
      ELSE.
        CONCATENATE c_ftp_p
                    gv_host
                    c_farw_slash
                    gv_ftp_dir
                    c_farw_slash
               INTO lv_ftp_path.
      ENDIF.                           " IF GV_FTP_DIR IS INITIAL.
      lv_text = text-fal.
      REPLACE ALL OCCURRENCES OF c_p1
                              IN lv_text
                            WITH p_dpath.
      REPLACE ALL OCCURRENCES OF c_p2
                              IN lv_text
                            WITH gv_as_path.
      REPLACE ALL OCCURRENCES OF c_p3
                              IN lv_text
                            WITH lv_ftp_path.
* filling the process details for extract log.
      PERFORM fill_process_details USING lv_text.
      CLEAR:
       lv_text,
       lv_ftp_path.
    ENDIF.                             " IF LV_DFLAG EQ C_FLAG_ON
  ENDIF.                               " IF GV_DESK EQ C_FLAG_ON and ...

  IF gv_desk EQ c_flag_on AND
   gv_as EQ c_flag_off AND
   gv_ftp EQ c_flag_off.

    IF lv_dflag EQ c_flag_on.

      lv_text = text-pfs.
      REPLACE ALL OCCURRENCES OF c_p1
                              IN lv_text
                            WITH gv_vp_filename.

* filling the process details for extract log.
      PERFORM fill_process_details USING lv_text.
      CLEAR lv_text.
      lv_text = text-mfs.
      REPLACE ALL OCCURRENCES OF c_p1
                              IN lv_text
                            WITH gv_vm_filename.
* filling the process details for extract log.
      PERFORM fill_process_details USING lv_text.
      CLEAR lv_text.
      lv_text = text-cfs.
      REPLACE ALL OCCURRENCES OF c_p1
                              IN lv_text
                            WITH gv_vc_filename.
* filling the process details for extract log.
      PERFORM fill_process_details USING lv_text.
      CLEAR lv_text.
      gv_download_flag = c_flag_on.
    ELSE.

      gv_download_flag = c_flag_off.

    ENDIF.                             " IF LV_DFLAG EQ C_FLAG_ON

  ELSEIF gv_desk EQ c_flag_off AND
         gv_as EQ c_flag_on AND
         gv_ftp EQ c_flag_off.

    IF lv_aflag EQ c_flag_on.

      lv_text = text-pfs.
      REPLACE ALL OCCURRENCES OF c_p1
                              IN lv_text
                            WITH gv_vp_filename.

* filling the process details for extract log.
      PERFORM fill_process_details USING lv_text.
      CLEAR lv_text.
      lv_text = text-mfs.
      REPLACE ALL OCCURRENCES OF c_p1
                              IN lv_text
                            WITH gv_vm_filename.
* filling the process details for extract log.
      PERFORM fill_process_details USING lv_text.
      CLEAR lv_text.
      lv_text = text-cfs.
      REPLACE ALL OCCURRENCES OF c_p1
                              IN lv_text
                            WITH gv_vc_filename.
* filling the process details for extract log.
      PERFORM fill_process_details USING lv_text.
      CLEAR lv_text.
      gv_download_flag = c_flag_on.
    ELSE.

      gv_download_flag = c_flag_off.

    ENDIF.                             " IF LV_AFLAG EQ C_FLAG_ON

  ELSEIF gv_desk EQ c_flag_off AND
         gv_as EQ c_flag_off AND
         gv_ftp EQ c_flag_on.

    IF lv_fflag EQ c_flag_on.

      lv_text = text-pfs.
      REPLACE ALL OCCURRENCES OF c_p1
                              IN lv_text
                            WITH gv_vp_filename.

* filling the process details for extract log.
      PERFORM fill_process_details USING lv_text.
      CLEAR lv_text.
      lv_text = text-mfs.
      REPLACE ALL OCCURRENCES OF c_p1
                              IN lv_text
                            WITH gv_vm_filename.
* filling the process details for extract log.
      PERFORM fill_process_details USING lv_text.
      CLEAR lv_text.
      lv_text = text-cfs.
      REPLACE ALL OCCURRENCES OF c_p1
                              IN lv_text
                            WITH gv_vc_filename.
* filling the process details for extract log.
      PERFORM fill_process_details USING lv_text.
      CLEAR lv_text.
      gv_download_flag = c_flag_on.
    ELSE.

      gv_download_flag = c_flag_off.

    ENDIF.                             " IF LV_FFLAG EQ C_FLAG_ON

  ELSEIF gv_desk EQ c_flag_on AND
         gv_as EQ c_flag_on AND
         gv_ftp EQ c_flag_off.

    IF lv_dflag EQ c_flag_on AND
       lv_aflag EQ c_flag_on.

      lv_text = text-pfs.
      REPLACE ALL OCCURRENCES OF c_p1
                              IN lv_text
                            WITH gv_vp_filename.

* filling the process details for extract log.
      PERFORM fill_process_details USING lv_text.
      CLEAR lv_text.
      lv_text = text-mfs.
      REPLACE ALL OCCURRENCES OF c_p1
                              IN lv_text
                            WITH gv_vm_filename.
* filling the process details for extract log.
      PERFORM fill_process_details USING lv_text.
      CLEAR lv_text.
      lv_text = text-cfs.
      REPLACE ALL OCCURRENCES OF c_p1
                              IN lv_text
                            WITH gv_vc_filename.
* filling the process details for extract log.
      PERFORM fill_process_details USING lv_text.
      CLEAR lv_text.
      gv_download_flag = c_flag_on.
    ELSE.

      gv_download_flag = c_flag_off.

    ENDIF.                             " IF LV_DFLAG EQ C_FLAG_ON AND ..

  ELSEIF gv_desk EQ c_flag_on AND
          gv_as EQ c_flag_off AND
          gv_ftp EQ c_flag_on.

    IF lv_dflag EQ c_flag_on AND
       lv_fflag EQ c_flag_on.

      lv_text = text-pfs.
      REPLACE ALL OCCURRENCES OF c_p1
                              IN lv_text
                            WITH gv_vp_filename.

* filling the process details for extract log.
      PERFORM fill_process_details USING lv_text.
      CLEAR lv_text.
      lv_text = text-mfs.
      REPLACE ALL OCCURRENCES OF c_p1
                              IN lv_text
                            WITH gv_vm_filename.
* filling the process details for extract log.
      PERFORM fill_process_details USING lv_text.
      CLEAR lv_text.
      lv_text = text-cfs.
      REPLACE ALL OCCURRENCES OF c_p1
                              IN lv_text
                            WITH gv_vc_filename.
* filling the process details for extract log.
      PERFORM fill_process_details USING lv_text.
      CLEAR lv_text.
      gv_download_flag = c_flag_on.
    ELSE.

      gv_download_flag = c_flag_off.

    ENDIF.                             " IF LV_DFLAG EQ C_FLAG_ON AND ..

  ELSEIF gv_desk EQ c_flag_off AND
          gv_as EQ c_flag_on AND
          gv_ftp EQ c_flag_on.

    IF lv_aflag EQ c_flag_on AND
       lv_fflag EQ c_flag_on.

      lv_text = text-pfs.
      REPLACE ALL OCCURRENCES OF c_p1
                              IN lv_text
                            WITH gv_vp_filename.

* filling the process details for extract log.
      PERFORM fill_process_details USING lv_text.
      CLEAR lv_text.
      lv_text = text-mfs.
      REPLACE ALL OCCURRENCES OF c_p1
                              IN lv_text
                            WITH gv_vm_filename.
* filling the process details for extract log.
      PERFORM fill_process_details USING lv_text.
      CLEAR lv_text.
      lv_text = text-cfs.
      REPLACE ALL OCCURRENCES OF c_p1
                              IN lv_text
                            WITH gv_vc_filename.
* filling the process details for extract log.
      PERFORM fill_process_details USING lv_text.
      CLEAR lv_text.
      gv_download_flag = c_flag_on.
    ELSE.

      gv_download_flag = c_flag_off.

    ENDIF.                             " IF LV_DFLAG EQ C_FLAG_ON AND ..

  ELSEIF gv_desk EQ c_flag_on AND
          gv_as EQ c_flag_on AND
          gv_ftp EQ c_flag_on.

    IF lv_dflag EQ c_flag_on AND
       lv_aflag EQ c_flag_on AND
       lv_fflag EQ c_flag_on.

      lv_text = text-pfs.
      REPLACE ALL OCCURRENCES OF c_p1
                              IN lv_text
                            WITH gv_vp_filename.

* filling the process details for extract log.
      PERFORM fill_process_details USING lv_text.
      CLEAR lv_text.
      lv_text = text-mfs.
      REPLACE ALL OCCURRENCES OF c_p1
                              IN lv_text
                            WITH gv_vm_filename.
* filling the process details for extract log.
      PERFORM fill_process_details USING lv_text.
      CLEAR lv_text.
      lv_text = text-cfs.
      REPLACE ALL OCCURRENCES OF c_p1
                              IN lv_text
                            WITH gv_vc_filename.
* filling the process details for extract log.
      PERFORM fill_process_details USING lv_text.
      CLEAR lv_text.
      gv_download_flag = c_flag_on.
    ELSE.

      gv_download_flag = c_flag_off.

    ENDIF.                             " IF LV_DFLAG EQ C_FLAG_ON AND ..

  ENDIF.                               " IF GV_DESK EQ C_FLAG_ON and

  IF gv_download_flag EQ c_flag_on.
* filling the process details for extract log
    PERFORM fill_process_details USING text-oes.
  ELSE.
* filling the process details for extract log
    PERFORM fill_process_details USING text-oea.
  ENDIF.                               " IF GV_DOWNLOAD_FLAG EQ C_FLAG..

ENDFORM.                               " CREATE_CSV_FLAT_FILE

*----------------------------------------------------------------------*
*  Form  CHANGE_DATE_FORMAT                                            *
*----------------------------------------------------------------------*
*  Subroutine for converting the date format yyyymmdd to mm/dd/yyyy    *
*----------------------------------------------------------------------*
*  <-- cv_yyyymmdd_date - date                                         *
*----------------------------------------------------------------------*
FORM change_date_format  CHANGING cv_yyyymmdd_date TYPE any.

  CONCATENATE cv_yyyymmdd_date+4(2)
              c_farw_slash
              cv_yyyymmdd_date+6(2)
              c_farw_slash
              cv_yyyymmdd_date+0(4)
         INTO cv_yyyymmdd_date.

ENDFORM.                               " CHANGE_DATE_FORMAT

*----------------------------------------------------------------------*
*  Form  CREATE_LOG_FILE                                               *
*----------------------------------------------------------------------*
*  This Subroutine is for creating log file on PC                      *
*----------------------------------------------------------------------*
*  There are no interface parameters to be passed on to the subroutine.*
*----------------------------------------------------------------------*
FORM create_log_file .

* Local work variables..................................................
  DATA:
    lv_filename TYPE string,        " File name
    lv_flag TYPE char1              " flag
           VALUE c_flag_off.

* preparing the extract log file
  PERFORM prepare_log_file.

  CONCATENATE gv_extract_logfile
              gv_ts_date
              c_underscore
              gv_ts_time
              c_dot
              c_rtf_extension
         INTO gv_extract_logfile.

  IF gv_desk EQ c_flag_on.

    CONCATENATE p_dpath
                c_back_slash
                gv_extract_logfile
           INTO lv_filename.
* creating extract log file to desktop.
    PERFORM write_to_frontend USING gt_extract_log
                                    lv_filename
                           CHANGING lv_flag.
    CLEAR lv_filename.

  ENDIF.                               " IF GV_DESK EQ C_FLAG_ON.
  IF gv_as EQ c_flag_on OR gv_ftp EQ c_flag_on.

* creating the extract log file to app server
    PERFORM create_file_appserver_log USING gt_extract_log
                                            gv_extract_logfile
                                   CHANGING gv_log_fullpath
                                            lv_flag.
  ENDIF.                               " IF GV_AS EQ C_FLAG_ON OR ...
  IF gv_ftp EQ c_flag_on.
* creating the extract log file to the ftp location
    PERFORM file_create_ftp USING gv_log_fullpath
                                  gv_extract_logfile
                         CHANGING lv_flag.
  ENDIF.                               " IF GV_FTP EQ C_FLAG_ON.

  IF gv_rfc EQ c_flag_on.
* close the ftp connection
    PERFORM ftp_connection_close.
  ENDIF.                               " IF GV_RFC EQ C_FLAG_ON.

  IF lv_flag EQ c_flag_on.
    READ TABLE gt_last_exe INTO gs_last_exe WITH KEY mode = c_date.
    IF sy-subrc EQ 0.
      gs_last_exe-value = gv_ts_date.
      MODIFY gt_last_exe FROM gs_last_exe INDEX sy-tabix.
    ELSE.
      gs_last_exe-mode = c_date.
      gs_last_exe-value = gv_ts_date.
      APPEND gs_last_exe TO gt_last_exe.
    ENDIF.                             " IF SY-SUBRC EQ 0.

    READ TABLE gt_last_exe INTO gs_last_exe WITH KEY mode = c_time.
    IF sy-subrc EQ 0.
      gs_last_exe-value = gv_ts_time.
      MODIFY gt_last_exe FROM gs_last_exe INDEX sy-tabix.
    ELSE.
      gs_last_exe-mode = c_time.
      gs_last_exe-value = gv_ts_time.
      APPEND gs_last_exe TO gt_last_exe.
    ENDIF.                             " IF SY-SUBRC EQ 0.
    gv_status = text-exs.
    MESSAGE s007.
  ELSE.
    gv_status = text-exf.
    MESSAGE s008.
  ENDIF.                               " IF LV_FLAG EQ C_FLAG_ON

  IF gv_as NE c_flag_on AND gv_ftp EQ c_flag_on.
* deleting the extract log file from app server
    PERFORM delete_file_from_app USING gv_extract_logfile.
  ENDIF.                               " IF GV_AS EQ C_FLAG_ON ...

ENDFORM.                               " CREATE_LOG_FILE

*----------------------------------------------------------------------*
*  Form  PREPARE_LOG_FILE                                              *
*----------------------------------------------------------------------*
*  This Subroutine is for prepareing the log file                      *
*----------------------------------------------------------------------*
*  There are no interface parameters to be passed on to the subroutine.*
*----------------------------------------------------------------------*
FORM prepare_log_file .

* Local work variables..................................................
  DATA: lv_ser_name TYPE msxxlist-name," Server name
        lv_total_records  TYPE i,      " Total records
        lv_string_totrec TYPE string,  " Total records in string
        lv_tab_string TYPE string,     " Process details number
* Begin of code insert for BNSF
        lv_total_amount TYPE vrtot,
                                       " Total invoice dollars
        lv_totamt TYPE string.         " Total invoice dollars in string
* End of code insert for BNSF

  APPEND text-l01 TO gt_extract_log.
  APPEND text-l02 TO gt_extract_log.
  APPEND text-l01 TO gt_extract_log.
  APPEND text-l03 TO gt_extract_log.
  APPEND text-l04 TO gt_extract_log.
* line formating in extract log file
  PERFORM dynamic_concatnate_* USING text-l05
                                     gv_current_date.
* line formating in extract log file
  PERFORM dynamic_concatnate_* USING text-l06
                                     gv_current_time.
* line formating in extract log file
  PERFORM dynamic_concatnate_* USING text-l07
                                     sy-uname.

  CALL FUNCTION 'GENERAL_GET_APP_SERVER_NAME'
    IMPORTING
      server_name = lv_ser_name.

* line formating in extract log file
  PERFORM dynamic_concatnate_* USING text-l08
                                     lv_ser_name.
* line formating in extract log file
  PERFORM dynamic_concatnate_* USING text-l09
                                     sy-mandt.

  APPEND text-l01 TO gt_extract_log.
  APPEND text-l10 TO gt_extract_log.
  APPEND text-l04 TO gt_extract_log.
* line formating in extract log file
  PERFORM dynamic_concatnate_* USING text-l11
                                     gv_vm_filename.
* line formating in extract log file
  PERFORM dynamic_concatnate_* USING text-l12
                                     gv_vc_filename.
* line formating in extract log file
  PERFORM dynamic_concatnate_* USING text-l13
                                     gv_vp_filename.

  APPEND text-l04 TO gt_extract_log.

  DESCRIBE TABLE gt_payments_csv LINES lv_total_records.
  lv_total_records = lv_total_records - 1.
  lv_string_totrec = lv_total_records.

* line formating in extract log file
  PERFORM dynamic_concatnate_* USING text-l16
                                     lv_string_totrec.

* Begin of code insert for BNSF

  CLEAR :
    lv_total_records,
    lv_string_totrec.

  DESCRIBE TABLE gt_vendor_csv LINES lv_total_records.
  lv_total_records = lv_total_records - 1.
  lv_string_totrec = lv_total_records.

* line formating in extract log file
  PERFORM dynamic_concatnate_* USING text-l14
                                     lv_string_totrec.

  CLEAR :
    lv_total_records,
    lv_string_totrec.

  DESCRIBE TABLE gt_contacts_csv LINES lv_total_records.
  lv_total_records = lv_total_records - 1.
  lv_string_totrec = lv_total_records.

* line formating in extract log file
  PERFORM dynamic_concatnate_* USING text-l15
                                     lv_string_totrec.

  CLEAR lv_total_amount.

  LOOP AT gt_vendor_payments INTO gs_vendor_payments.
    lv_total_amount = lv_total_amount + gs_vendor_payments-wrbtr.
  ENDLOOP.

  lv_totamt = lv_total_amount.

  CONCATENATE lv_totamt
              space
              c_usd
         INTO lv_totamt.

* line formating in extract log file
  PERFORM dynamic_concatnate_* USING text-l17
                                     lv_totamt.

* End of code insert for BNSF

  APPEND text-l04 TO gt_extract_log.

  APPEND text-l01 TO gt_extract_log.
  APPEND text-l18 TO gt_extract_log.
  APPEND text-l04 TO gt_extract_log.

  LOOP AT gt_process_details INTO gs_process_details.
    lv_tab_string = sy-tabix.

    CONCATENATE c_star
                lv_tab_string
           INTO lv_tab_string SEPARATED BY space.
* line formating in extract log file
    PERFORM dynamic_concatnate_* USING lv_tab_string
                                     gs_process_details-tab_line.
  ENDLOOP.                             " LOOP AT GT_PROCESS_DETAILS ...

  APPEND text-l04 TO gt_extract_log.

  APPEND text-l20 TO gt_extract_log.

ENDFORM.                               " PREPARE_LOG_FILE

*----------------------------------------------------------------------*
*  Form  FILL_PROCESS_DETAILS                                          *
*----------------------------------------------------------------------*
*  This Subroutine is for filling the process details tab              *
*----------------------------------------------------------------------*
*  --> iv_text - text row for process details table                    *
*----------------------------------------------------------------------*
FORM fill_process_details  USING iv_text TYPE any.

  APPEND iv_text TO gt_process_details.

ENDFORM.                               " fill_PROCESS_DETAILS

*----------------------------------------------------------------------*
*  Form  DYNAMIC_CONCATNATE_*                                          *
*----------------------------------------------------------------------*
*  This Subroutine is for adding * at end of the line                  *
*----------------------------------------------------------------------*
*  --> iv_text   - text                                                *
*  --> iv_string - text                                                *
*----------------------------------------------------------------------*
FORM dynamic_concatnate_*  USING iv_text TYPE any
                                 iv_string TYPE any.
* Local work variables..................................................
  DATA:
    lv_string TYPE string,               " String
    lv_post_string TYPE string,          " String
    lv_pre_string TYPE string,           " String
    lv_line TYPE string,                 " String
    lv_line_len TYPE i,                  " Line length
    lv_pre_remain TYPE i,                " Pre string remain length
    lv_text_length TYPE i,               " Text length
    lv_string_length TYPE i,             " String length
    lv_write_length TYPE i,              " String line length
    lv_offset TYPE i,                    " Off set
    lv_remain_len TYPE i.                " Remain string length

  CONCATENATE iv_text
              space
         INTO lv_post_string.
  lv_text_length = STRLEN( lv_post_string ).
  lv_write_length = 71 - lv_text_length.
  lv_write_length = lv_write_length - 2.
  lv_string_length = STRLEN( iv_string ).
  lv_remain_len = lv_string_length.
  lv_offset = 0.
  WHILE lv_remain_len GT 0.
    IF lv_remain_len LT lv_write_length.
      lv_write_length = lv_remain_len.
    ENDIF.                             " IF LV_REMAIN_LEN LT ....
    lv_string = iv_string+lv_offset(lv_write_length).
    CONCATENATE lv_post_string
                space
                lv_string
           INTO lv_line.
    lv_line_len = STRLEN( lv_line ).
    lv_pre_string = text-l04.
    lv_pre_remain = 71 - lv_line_len.
    lv_pre_string = lv_pre_string+lv_line_len(lv_pre_remain).
    CONCATENATE lv_line
                lv_pre_string
           INTO lv_line.
    APPEND lv_line TO gt_extract_log.
    lv_post_string = text-l04.
    lv_post_string = lv_post_string+0(lv_text_length).
    lv_offset = lv_offset + lv_write_length.
    lv_remain_len = lv_string_length - lv_offset.
    CLEAR lv_line.
  ENDWHILE.                            " WHILE LV_REMAIN_LEN GT 0.

ENDFORM.                               " DYNAMIC_CONCATNATE_*

*----------------------------------------------------------------------*
*  Form  CREATE_APPSERVER_LOG                                          *
*----------------------------------------------------------------------*
*  This Subroutine is for creating appserver log file                  *
*----------------------------------------------------------------------*
*  There are no interface parameters to be passed on to the            *
*  subroutine.                                                         *
*----------------------------------------------------------------------*
FORM create_appserver_log.

* Local work variables..................................................
  DATA lv_tab_string TYPE string.      " process details number

  OPEN DATASET c_appser_log FOR APPENDING IN TEXT MODE
                                ENCODING DEFAULT.
  IF sy-subrc EQ 0.
    TRANSFER text-l01 TO c_appser_log.
    TRANSFER text-l21 TO c_appser_log.
    TRANSFER text-l01 TO c_appser_log.
    TRANSFER text-l03 TO c_appser_log.
    TRANSFER text-l04 TO c_appser_log.

    gv_current_date = gv_ts_date.
* change date format YYYYMMDD into MM/DD/YYYY.
    PERFORM change_date_format CHANGING gv_current_date.
* line formating in server extract log file.
    PERFORM dynamic_concat_*_appser USING text-l22
                                          gv_current_date.

    CONCATENATE gv_ts_time+0(2)
                c_colon
                gv_ts_time+2(2)
                c_colon
                gv_ts_time+4(2)
           INTO gv_current_time.

* line formating in server extract log file.
    PERFORM dynamic_concat_*_appser USING text-l23
                                          gv_current_time.

* line formating in server extract log file.
    PERFORM dynamic_concat_*_appser USING text-l24
                                          sy-uname.

* line formating in server extract log file.
    PERFORM dynamic_concat_*_appser USING text-l09
                                          sy-mandt.

    TRANSFER text-l01 TO c_appser_log.
    TRANSFER text-l04 TO c_appser_log.
* line formating in server extract log file.
    PERFORM dynamic_concat_*_appser USING text-l19
                                          gv_status.
    TRANSFER text-l04 TO c_appser_log.

    LOOP AT gt_process_details INTO gs_process_details.

      lv_tab_string = sy-tabix.

      CONCATENATE c_star
                  lv_tab_string
             INTO lv_tab_string SEPARATED BY space.
* line formating in server extract log file.
      PERFORM dynamic_concat_*_appser USING lv_tab_string
                                            gs_process_details-tab_line.

    ENDLOOP.                           " LOOP AT GT_PROCESS_DETAILS ...

    TRANSFER text-l04 TO c_appser_log.
    TRANSFER text-l20 TO c_appser_log.
    TRANSFER text-l01 TO c_appser_log.

    CLOSE DATASET c_appser_log.
  ELSE.
* filling the process details for extract log
    PERFORM fill_process_details USING text-una.
    gv_status = text-exf.
* LOG file on Application Server.
    PERFORM create_appserver_log.

    MESSAGE e024.
  ENDIF.                               " IF SY-SUBRC EQ 0

ENDFORM.                               " CREATE_APPSERVER_LOG

*----------------------------------------------------------------------*
*  Form  DYNAMIC_CONCAT_*_APPSER                                       *
*----------------------------------------------------------------------*
*  This Subroutine is for formatting the line in appserver extract log *
*----------------------------------------------------------------------*
*  --> iv_text    - text                                               *
*  --> iv_string  - text                                               *
*----------------------------------------------------------------------*
FORM dynamic_concat_*_appser  USING iv_text TYPE any
                                    iv_string TYPE any.
* Local work variables..................................................
  DATA:
    lv_string TYPE string,               " String
    lv_post_string TYPE string,          " String
    lv_pre_string TYPE string,           " String
    lv_line TYPE string,                 " String
    lv_line_len TYPE i,                  " Line length
    lv_pre_remain TYPE i,                " Pre string remain length
    lv_text_length TYPE i,               " Text length
    lv_string_length TYPE i,             " String length
    lv_write_length TYPE i,              " String line length
    lv_offset TYPE i,                    " Off set
    lv_remain_len TYPE i.                " Remain string length

  CONCATENATE iv_text
              space
         INTO lv_post_string.
  lv_text_length = STRLEN( lv_post_string ).
  lv_write_length = 71 - lv_text_length.
  lv_write_length = lv_write_length - 2.
  lv_string_length = STRLEN( iv_string ).
  lv_remain_len = lv_string_length.
  lv_offset = 0.
  WHILE lv_remain_len GT 0.
    IF lv_remain_len LT lv_write_length.
      lv_write_length = lv_remain_len.
    ENDIF.                             " IF LV_REMAIN_LEN LT ...
    lv_string = iv_string+lv_offset(lv_write_length).
    CONCATENATE lv_post_string
                space
                lv_string
           INTO lv_line.
    lv_line_len = STRLEN( lv_line ).
    lv_pre_string = text-l04.
    lv_pre_remain = 71 - lv_line_len.
    lv_pre_string = lv_pre_string+lv_line_len(lv_pre_remain).
    CONCATENATE lv_line
                lv_pre_string
           INTO lv_line.
    TRANSFER lv_line TO c_appser_log.
    lv_post_string = text-l04.
    lv_post_string = lv_post_string+0(lv_text_length).
    lv_offset = lv_offset + lv_write_length.
    lv_remain_len = lv_string_length - lv_offset.
    CLEAR lv_line.
  ENDWHILE.                            " WHILE LV_REMAIN_LEN GT 0

ENDFORM.                               " DYNAMIC_CONCAT_*_APPSER

*----------------------------------------------------------------------*
*  Form  EXTRACT_STARTUP                                               *
*----------------------------------------------------------------------*
*  This Subroutine is for getting the time stamp                       *
*----------------------------------------------------------------------*
*  There are no interface parameters to be passed on to the            *
*  subroutine.                                                         *
*----------------------------------------------------------------------*
FORM extract_startup .
  GET TIME STAMP FIELD gv_timestamp.
  CONVERT TIME STAMP gv_timestamp TIME ZONE sy-zonlo
                INTO DATE gv_ts_date TIME gv_ts_time.

  gv_vp_filename = text-vpf.
* Begin of code insert for BNSF
  REPLACE ALL OCCURRENCES OF c_p1
                          IN gv_vp_filename
                        WITH sy-sysid.
  REPLACE ALL OCCURRENCES OF c_p2
                          IN gv_vp_filename
                        WITH sy-mandt.
* End of code insert for BNSF
  gv_vm_filename = text-vmf.
* Begin of code insert for BNSF
  REPLACE ALL OCCURRENCES OF c_p1
                          IN gv_vm_filename
                        WITH sy-sysid.
  REPLACE ALL OCCURRENCES OF c_p2
                          IN gv_vm_filename
                        WITH sy-mandt.
* End of code insert for BNSF
  gv_vc_filename = text-vcf.
* Begin of code insert for BNSF
  REPLACE ALL OCCURRENCES OF c_p1
                          IN gv_vc_filename
                        WITH sy-sysid.
  REPLACE ALL OCCURRENCES OF c_p2
                          IN gv_vc_filename
                        WITH sy-mandt.
* End of code insert for BNSF
  gv_extract_logfile = text-elf.
  gv_to_date = gv_ts_date.
  gv_to_time = gv_ts_time.
  CONCATENATE sy-mandt
              c_input_file
         INTO gv_input_file.
ENDFORM.                               " EXTRACT_STARTUP

*----------------------------------------------------------------------*
*  Form  CREATE_FILE_APPSERVER                                         *
*----------------------------------------------------------------------*
*  This Subroutine is for creating the file to application server      *
*----------------------------------------------------------------------*
*  --> it_table     - data in table                                    *
*  --> is_tabline   - string                                           *
*  --> iv_filename  - file name                                        *
*----------------------------------------------------------------------*
FORM create_file_appserver USING it_table TYPE STANDARD TABLE
                                 iv_filename TYPE string
                        CHANGING cv_fullname TYPE string
                                 cv_flag TYPE char1.
* local work variables..................................................
  DATA:
    is_tabline TYPE string,            " String
    lv_length TYPE i,                  " Length
    lv_char TYPE char1,                " Character
    lv_slash TYPE char1.               " Slash type in path

  cv_flag = c_flag_off.

  IF gv_as_path IS NOT INITIAL.
    lv_length = STRLEN( gv_as_path ).
    lv_length = lv_length - 1.
    lv_char = gv_as_path+lv_length(1).

    IF p_dpath CA c_farw_slash.
      lv_slash = c_farw_slash.
    ELSE.
      lv_slash = c_back_slash.
    ENDIF.                             " IF P_DPATH CA C_FARW_SLASH.

    IF lv_char EQ lv_slash.
      CONCATENATE gv_as_path
                  iv_filename
             INTO cv_fullname.
    ELSE.
      CONCATENATE gv_as_path
                  c_back_slash
                  iv_filename
             INTO cv_fullname.
    ENDIF.                             " IF LV_CHAR EQ LV_SLASH.
  ELSE.
    cv_fullname = iv_filename.
  ENDIF.                               " IF GV_AS_PATH IS NOT INITIAL.

  OPEN DATASET cv_fullname FOR OUTPUT IN TEXT MODE
                                ENCODING DEFAULT.
  IF sy-subrc EQ 0.
    cv_flag = c_flag_on.

    LOOP AT it_table INTO is_tabline.
      TRANSFER is_tabline TO cv_fullname.
    ENDLOOP.                           " LOOP AT IT_TABLE INTO IS_TAB...

    CLOSE DATASET cv_fullname.
  ELSE.
* filling the process details for extract log
    PERFORM fill_process_details USING text-una.
    gv_status = text-exf.

* LOG file on Application Server.
    PERFORM create_appserver_log.
    MESSAGE e024.
  ENDIF.                               " IF SY-SUBRC EQ 0.

ENDFORM.                               " CREATE_APPSERVER_LOG

*----------------------------------------------------------------------*
*  Form  CREATE_FILE_APPSERVER_LOG                                     *
*----------------------------------------------------------------------*
*  This Subroutine is for creating the file to application server      *
*----------------------------------------------------------------------*
*  --> it_table     - data in table                                    *
*  --> is_tabline   - string                                           *
*  --> iv_filename  - file name                                        *
*----------------------------------------------------------------------*
FORM create_file_appserver_log USING it_table TYPE STANDARD TABLE
                                 iv_filename TYPE string
                        CHANGING cv_fullname TYPE string
                                 cv_flag TYPE char1.
* local work variables..................................................
  DATA:
    is_tabline TYPE string,            " String
    lv_length TYPE i,                  " Length
    lv_char TYPE char1,                " Character
    lv_slash TYPE char1.               " Slash type in path

  cv_flag = c_flag_off.

  IF gv_log_path IS NOT INITIAL.
    lv_length = STRLEN( gv_log_path ).
    lv_length = lv_length - 1.
    lv_char = gv_as_path+lv_length(1).

    IF gv_log_path CA c_farw_slash.
      lv_slash = c_farw_slash.
    ELSE.
      lv_slash = c_back_slash.
    ENDIF.                             " IF P_DPATH CA C_FARW_SLASH.

    IF lv_char EQ lv_slash.
      CONCATENATE gv_log_path
                  iv_filename
             INTO cv_fullname.
    ELSE.
      CONCATENATE gv_log_path
                  c_back_slash
                  iv_filename
             INTO cv_fullname.
    ENDIF.                             " IF LV_CHAR EQ LV_SLASH.
  ELSE.
    cv_fullname = iv_filename.
  ENDIF.                               " IF GV_AS_PATH IS NOT INITIAL.

  OPEN DATASET cv_fullname FOR OUTPUT IN TEXT MODE
                                ENCODING DEFAULT.
  IF sy-subrc EQ 0.
    cv_flag = c_flag_on.

    LOOP AT it_table INTO is_tabline.
      TRANSFER is_tabline TO cv_fullname.
    ENDLOOP.                           " LOOP AT IT_TABLE INTO IS_TAB...

    CLOSE DATASET cv_fullname.
  ELSE.
* filling the process details for extract log
    PERFORM fill_process_details USING text-una.
    gv_status = text-exf.

* LOG file on Application Server.
    PERFORM create_appserver_log.
    MESSAGE e024.
  ENDIF.                               " IF SY-SUBRC EQ 0.

ENDFORM.                               " CREATE_FILE_APPSERVER_LOG

*----------------------------------------------------------------------*
*  Form  FILE_CREATE_FTP                                               *
*----------------------------------------------------------------------*
*  This Subroutine is for writing the file to ftp location             *
*----------------------------------------------------------------------*
*  --> iv_path     - full path                                         *
*  --> iv_filename - file name                                         *
*  <-- cv_flag     - check flag                                        *
*----------------------------------------------------------------------*
FORM file_create_ftp USING iv_path TYPE string
                           iv_filename TYPE string
                  CHANGING cv_flag TYPE char1.

* local work variables..................................................
  DATA:
   lv_string TYPE string,              " String
   lv_length TYPE i,                   " Length
   lv_char TYPE char1.                 " Character

  IF gv_ftp_dir IS INITIAL.
    CONCATENATE c_farw_slash
                iv_filename
           INTO lv_string.
  ELSE.
    lv_length = STRLEN( gv_ftp_dir ).
    lv_length = lv_length - 1.
    lv_char = gv_ftp_dir+lv_length(1).
    IF lv_char EQ c_farw_slash.
      CONCATENATE c_farw_slash
                  gv_ftp_dir
                  iv_filename
             INTO lv_string.
    ELSE.
      CONCATENATE c_farw_slash
                  gv_ftp_dir
                  c_farw_slash
                  iv_filename
             INTO lv_string.
    ENDIF.                             " IF LV_CHAR EQ C_FARW_SLASH.
  ENDIF.                               " IF GV_FTP_DIR IS INITIAL.

  CLEAR gv_cmd.

  CONCATENATE c_ftp_put
              iv_path
              lv_string
         INTO gv_cmd
    SEPARATED BY space.

* writing the file to the ftp location
  PERFORM write_file_to_ftp CHANGING cv_flag.

  cv_flag = c_flag_on.

ENDFORM.                               " FILE_CREATE_FTP

*----------------------------------------------------------------------*
*  Form  REPLACE_COMMA_WITH_SPACE                                      *
*----------------------------------------------------------------------*
*  Subroutine is for replacing the commas with space charater          *
*----------------------------------------------------------------------*
*  <-- cv_string  - text                                               *
*----------------------------------------------------------------------*
FORM replace_comma_with_space  CHANGING cv_string TYPE any.

  REPLACE ALL OCCURRENCES OF ',' IN cv_string
                                 WITH space.

ENDFORM.                               " REPLACE_COMMA_WITH_SPACE

*----------------------------------------------------------------------*
*  Form  WRITE_FILE_TO_FTP                                             *
*----------------------------------------------------------------------*
*  This Subroutine is for ftp connection and write file to ftp         *
*----------------------------------------------------------------------*
*  <-- cv_flag - flag                                                  *
*----------------------------------------------------------------------*
FORM write_file_to_ftp CHANGING cv_flag TYPE char1.

  DATA: BEGIN OF ls_result,
          line(100) TYPE c,
        END OF ls_result.

  DATA lt_result LIKE STANDARD TABLE OF ls_result.

  CALL FUNCTION 'FTP_CONNECT'
    EXPORTING
      user            = gv_user
      password        = gv_pass
      host            = gv_host
      rfc_destination = gv_rfc
    IMPORTING
      handle          = gv_hdl.

  IF gv_cmd NE space.
    CALL FUNCTION 'FTP_COMMAND'
      EXPORTING
        handle        = gv_hdl
        command       = gv_cmd
        compress      = gv_compress
      TABLES
        data          = lt_result
      EXCEPTIONS
        command_error = 1
        tcpip_error   = 2
        data_error    = 3
        OTHERS        = 4.

    IF sy-subrc EQ 0.
      cv_flag = c_flag_on.
    ENDIF.                             " IF SY-SUBRC EQ 0

    REFRESH lt_result.
  ENDIF.                               " IF GV_CMD NE SPACE.

ENDFORM.                               " WRITE_FILE_TO_FTP

*----------------------------------------------------------------------*
*  Form  PASSWORD_ENCRYPTION                                           *
*----------------------------------------------------------------------*
*  This Subroutine is for getting the password encryption string       *
*----------------------------------------------------------------------*
*  There are no interface parameters to be passed on to the subroutine.*
*----------------------------------------------------------------------*
FORM password_encryption .

* Local work variables..................................................
  DATA: lv_slen TYPE i,                " String length
        lv_key TYPE i VALUE 26101957.

  lv_slen = STRLEN( gv_pass ).

  CALL FUNCTION 'HTTP_SCRAMBLE'
    EXPORTING
      SOURCE      = gv_pass
      sourcelen   = lv_slen
      key         = lv_key
    IMPORTING
      destination = gv_pass.

ENDFORM.                               " PASSWORD_ENCRYPTION

*----------------------------------------------------------------------*
*  Form  FTP_CONNECTION_CLOSE                                          *
*----------------------------------------------------------------------*
*  This Subroutine is for disconnect and close the ftp connection      *
*----------------------------------------------------------------------*
*  There are no interface parameters to be passed on to the subroutine.*
*----------------------------------------------------------------------*
FORM ftp_connection_close .

  CALL FUNCTION 'FTP_DISCONNECT'
    EXPORTING
      handle = gv_hdl.

  CALL FUNCTION 'RFC_CONNECTION_CLOSE'
    EXPORTING
      destination = gv_rfc.

ENDFORM.                               " FTP_CONNECTION_CLOSE

*----------------------------------------------------------------------*
*  Form  DELETE_FILE_FROM_APP                                          *
*----------------------------------------------------------------------*
*  Subroutine is for deleting the file from app server                 *
*----------------------------------------------------------------------*
*  --> iv_fullpath - full path                                         *
*----------------------------------------------------------------------*
FORM delete_file_from_app  USING iv_fullpath TYPE string.

  OPEN DATASET iv_fullpath FOR INPUT IN TEXT MODE ENCODING DEFAULT.

  IF sy-subrc NE 0.
* filling the process details for extract log
    PERFORM fill_process_details USING text-uaa.
    gv_status = text-exf.
* LOG file on Application Server.
    PERFORM create_appserver_log.
    MESSAGE e030.
  ENDIF.                               " IF SY-SUBRC NE 0

  DELETE DATASET iv_fullpath.

ENDFORM.                               " DELETE_FILE_FROM_APP
*----------------------------------------------------------------------*
*  Form  FILL_EMAIL_DETAILS                                            *
*----------------------------------------------------------------------*
*  This subroutine is for fetching the email details for all entries in*
*  vendor details table                                                *
*----------------------------------------------------------------------*
*  There are no interface parameters to be passed on to the subroutine.*
*----------------------------------------------------------------------*
FORM fill_email_details .

  SELECT addrnumber                    " Address number
         persnumber                    " Person number
         smtp_addr                     " E-Mail Address
    INTO TABLE gt_email_details
    FROM adr6
     FOR ALL ENTRIES IN gt_vendor_details
   WHERE addrnumber EQ gt_vendor_details-adrnr.

ENDFORM.                               " FILL_EMAIL_DETAILS
*----------------------------------------------------------------------*
*  Form  FILL_REGION_DETAILS                                           *
*----------------------------------------------------------------------*
*  This subroutine is for fetching the region details for all entries  *
*  vendor details table                                                *
*----------------------------------------------------------------------*
*  There are no interface parameters to be passed on to the subroutine.*
*----------------------------------------------------------------------*
FORM fill_region_details .

  SELECT spras                         " Language Key
         land1                         " Country Key
         bland                         " Region
         bezei                         " Region description
INTO TABLE gt_vendor_region_details
      FROM t005u
       FOR ALL ENTRIES IN gt_vendor_details
     WHERE spras EQ sy-langu
       AND land1 EQ gt_vendor_details-land1
       AND bland EQ gt_vendor_details-regio.

ENDFORM.                               " FILL_REGION_DETAILS
*----------------------------------------------------------------------*
*  Form  FILL_PTERMS_DETAILS                                           *
*----------------------------------------------------------------------*
*  This subroutine is for fetching the payment terms details for all   *
*  entries of vendor payments                                          *
*----------------------------------------------------------------------*
*  There are no interface parameters to be passed on to the subroutine.*
*----------------------------------------------------------------------*
FORM fill_pterms_details .

  SELECT spras                         " Language Key
         zterm                         " Terms of Payment Key
         text1 "vtext                         " Descr. of terms of payment
  INTO TABLE gt_pterms_details
      FROM t052u                            "tvzbt
       FOR ALL ENTRIES IN gt_vendor_payments
     WHERE spras = sy-langu
       AND zterm = gt_vendor_payments-zterm.

ENDFORM.                               " FILL_PTERMS_DETAILS
*----------------------------------------------------------------------*
*  Form  FILL_DOCTYPE_DESC                                             *
*----------------------------------------------------------------------*
*  This subroutine is for fetching the document type description detail*
*  for all entries of vendor payments                                  *
*----------------------------------------------------------------------*
*  There are no interface parameters to be passed on to the subroutine.*
*----------------------------------------------------------------------*
FORM fill_doctype_desc .

  SELECT spras                         " Language Key
         blart                         " Document Type
         ltext                         " Document Type Description
    INTO TABLE gt_doctype_desc
    FROM t003t
     FOR ALL ENTRIES IN gt_vendor_payments
   WHERE spras = sy-langu
     AND blart = gt_vendor_payments-blart.

ENDFORM.                               " FILL_DOCTYPE_DESC

*----------------------------------------------------------------------*
*  Form  FILL_VENDOR_GROUP_DETAILS                                     *
*----------------------------------------------------------------------*
*  This subroutine is for fetching the vendor group description details*
*  for all entries of vendor details.                                  *
*----------------------------------------------------------------------*
*  There are no interface parameters to be passed on to the subroutine.*
*----------------------------------------------------------------------*
FORM fill_vendor_group_details .

  SELECT spras                         " Language Key
         ktokk                         " Vendor account group
         txt30                         " Vendor Group name
    INTO TABLE gt_vendor_group_desc
    FROM t077y
     FOR ALL ENTRIES IN gt_vendor_details
   WHERE spras EQ sy-langu
     AND ktokk EQ gt_vendor_details-ktokk.

ENDFORM.                               " FILL_VENDOR_GROUP_DETAILS

*----------------------------------------------------------------------*
*  Form  FILL_CONTACTS_NAMES                                           *
*----------------------------------------------------------------------*
*  this subroutine is for fetching the person's name details for all   *
*  entries of vendor contacts.                                         *
*----------------------------------------------------------------------*
*  There are no interface parameters to be passed on to the subroutine.*
*----------------------------------------------------------------------*
FORM fill_contacts_names .

  SELECT persnumber                    " Person number
         date_from                     " Valid-from date
         nation                        " International addr. version ID
         name_first                    " First Name
         name_last                     " Last Name
    INTO TABLE gt_contacts_names
    FROM adrp
     FOR ALL ENTRIES IN gt_vendor_contacts
   WHERE persnumber = gt_vendor_contacts-prsnr
     AND date_from  = gt_vendor_contacts-date_from
     AND nation = gt_vendor_contacts-nation.

ENDFORM.                               " FILL_CONTACTS_NAMES
*----------------------------------------------------------------------*
*  Form  FETCH_CONFIG_DETAILS                                          *
*----------------------------------------------------------------------*
*  This subroutine is for fetching quickpay configuration details      *
*----------------------------------------------------------------------*
*  There are no interface parameters to be passed on to the subroutine.*
*----------------------------------------------------------------------*
FORM fetch_config_details .

* Local work variables..................................................
  DATA: lv_subrc TYPE sy-subrc,        " sy-subrc
        lv_char TYPE char1,            " char
        lv_length TYPE i.              " string length

  REFRESH gt_config_file.

  IF gv_config_file IS INITIAL.

    CONCATENATE sy-mandt
                c_configure
                c_dot
                c_csv_extension
           INTO gv_config_file.
  ENDIF.                               " IF GV_CONFIG_FILE IS INITIAL

  OPEN DATASET gv_config_file FOR INPUT IN TEXT MODE ENCODING DEFAULT.

  IF sy-subrc NE 0.
* filling the process details for extract log
    PERFORM fill_process_details USING text-uaa.
    gv_status = text-exf.
* LOG file on Application Server.
    PERFORM create_appserver_log.
    MESSAGE e030.
  ENDIF.                               " IF SY-SUBRC NE 0

  DO.
    READ DATASET gv_config_file INTO gs_config_csv.
    lv_subrc = sy-subrc.
    IF lv_subrc NE 0.
      EXIT.
    ENDIF.                             " IF SY-SUBRC NE 0
    SPLIT gs_config_csv AT c_comma
                      INTO gs_config_file-mode
                           gs_config_file-type.

    APPEND gs_config_file TO gt_config_file.
    CLEAR gs_config_file.
  ENDDO.                               " IF SY-SUBRC NE 0 EXIT

  CLEAR lv_subrc.

  CLOSE DATASET gv_config_file.

  IF gv_config_details IS INITIAL.
    CONCATENATE sy-mandt
                c_config_details
                c_dot
                c_csv_extension
           INTO gv_config_details.
  ENDIF.                               " IF GV_CONFIG_DETAILS IS INITIAL

  OPEN DATASET gv_config_details FOR INPUT IN TEXT MODE
                                     ENCODING DEFAULT.

  IF sy-subrc NE 0.
* filling the process details for extract log
    PERFORM fill_process_details USING text-uaa.
    gv_status = text-exf.
* LOG file on Application Server.
    PERFORM create_appserver_log.
    MESSAGE e030.
  ENDIF.                               " IF SY-SUBRC NE 0

  DO.
    READ DATASET gv_config_details INTO gs_config_csv.
    lv_subrc = sy-subrc.
    IF lv_subrc NE 0.
      EXIT.
    ENDIF.                             " IF SY-SUBRC NE 0
    SPLIT gs_config_csv AT c_comma
                      INTO gs_config_details-mode
                           gs_config_details-type
                           gs_config_details-value.

    APPEND gs_config_details TO gt_config_details.
    CLEAR gs_config_details.
  ENDDO.                               " IF SY-SUBRC NE 0 EXIT

  CLOSE DATASET gv_config_details.

  READ TABLE gt_config_file INTO gs_config_file
                          WITH KEY mode = c_outbound.
  IF sy-subrc EQ 0.
    IF gs_config_file-type CA c_app_server.
    gv_as = c_flag_on.
      READ TABLE gt_config_details INTO gs_config_details
                               WITH KEY mode = c_outbound
                                        type = c_app_server.
      lv_length = STRLEN( gs_config_details-value ).
      lv_length = lv_length - 1.
      lv_char = gs_config_details-value+lv_length(1).

      IF lv_char EQ c_back_slash.
        gv_as_path = gs_config_details-value+0(lv_length).
      ELSE.
        gv_as_path = gs_config_details-value.
      ENDIF.                           " IF LV_CHAR EQ C_BACK_SLASH.
    ENDIF.                             " IF GS_CONFIG_FILE-TYPE CA ...

    IF gs_config_file-type CA c_desktop.
      gv_desk = c_flag_on.
    ENDIF.                             " IF GS_CONFIG_FILE-TYPE CA ...

    IF gs_config_file-type CA c_ftp.
      gv_ftp = c_flag_on.
      READ TABLE gt_config_details INTO gs_config_details
                               WITH KEY mode = c_outbound
                                        type = c_ftp_host.
      gv_host = gs_config_details-value.
      READ TABLE gt_config_details INTO gs_config_details
                             WITH KEY mode = c_outbound
                                      type = c_ftp_uname.
      gv_user = gs_config_details-value.
      READ TABLE gt_config_details INTO gs_config_details
                             WITH KEY mode = c_outbound
                                      type = c_ftp_password.
      gv_pass = gs_config_details-value.
      READ TABLE gt_config_details INTO gs_config_details
                             WITH KEY mode = c_outbound
                                      type = c_ftp_dir.
      gv_ftp_dir = gs_config_details-value.
    ENDIF.                             " IF GS_CONFIG_FILE-TYPE CA ...
  ENDIF.                               " IF SY-SUBRC EQ 0.

ENDFORM.                               " FETCH_CONFIG_DETAILS

*----------------------------------------------------------------------*
*  Form  MODIFY_SCREEN                                                 *
*----------------------------------------------------------------------*
*  This subroutine is for modifying the selection screen based on quic-*
*  kpay configuration inputs                                           *
*----------------------------------------------------------------------*
*  There are no interface parameters to be passed on to the subroutine.*
*----------------------------------------------------------------------*
FORM modify_screen .

  IF gv_desk IS INITIAL.
    LOOP AT SCREEN.
      IF screen-name EQ '%BPTH004_BLOCK_1000'.
        screen-active = 0.
        MODIFY SCREEN.
      ENDIF.                           " SCREEN-NAME EQ '%BPTH004_BLO...
      IF screen-name EQ '%_P_DPATH_%_APP_%-TEXT'.
        screen-active = 0.
        MODIFY SCREEN.
      ENDIF.                           " SCREEN-NAME EQ '%_P_DPATH_%_...
      IF screen-name EQ 'P_DPATH'.
        screen-active = 0.
        MODIFY SCREEN.
      ENDIF.                           " SCREEN-NAME EQ 'P_DPATH'
    ENDLOOP.                           " LOOP AT SCREEN
  ENDIF.                               " IF GV_DESK IS INITIAL.

ENDFORM.                               " MODIFY_SCREEN
*----------------------------------------------------------------------*
*  Form  BROWSE_FOR_PATH                                               *
*----------------------------------------------------------------------*
*  This subroutine is to browse the path to save extract files         *
*----------------------------------------------------------------------*
*  There are no interface parameters to be passed on to the subroutine.*
*----------------------------------------------------------------------*
FORM browse_for_path .

  CALL METHOD cl_gui_frontend_services=>directory_browse
*  EXPORTING
*    window_title         =
*    initial_folder       =
    CHANGING
      selected_folder      = p_dpath.

ENDFORM.                               " BROWSE_FOR_PATH.

*----------------------------------------------------------------------*
*  Form  WRITE_TO_FRONTEND                                             *
*----------------------------------------------------------------------*
*  This subroutine is to write the files at front end                  *
*----------------------------------------------------------------------*
*  --> IV_CSV_DATA - CSV formated data table                           *
*  --> IV_FILENAME - File path                                         *
*  <-- CV_FLAG     - Flag                                              *
*----------------------------------------------------------------------*
FORM write_to_frontend  USING iv_csv_data TYPE STANDARD TABLE
                              iv_filename TYPE string
                     CHANGING cv_flag TYPE char1.

  cv_flag = c_flag_off.

  CALL FUNCTION 'GUI_DOWNLOAD'
    EXPORTING
      filename                = iv_filename
    TABLES
      data_tab                = iv_csv_data
    EXCEPTIONS
      file_write_error        = 1
      no_batch                = 2
      gui_refuse_filetransfer = 3
      invalid_type            = 4
      no_authority            = 5
      unknown_error           = 6
      header_not_allowed      = 7
      separator_not_allowed   = 8
      filesize_not_allowed    = 9
      header_too_long         = 10
      dp_error_create         = 11
      dp_error_send           = 12
      dp_error_write          = 13
      unknown_dp_error        = 14
      access_denied           = 15
      dp_out_of_memory        = 16
      disk_full               = 17
      dp_timeout              = 18
      file_not_found          = 19
      dataprovider_exception  = 20
      control_flush_error     = 21
      OTHERS                  = 22.

  IF sy-subrc EQ 0.
    cv_flag = c_flag_on.
  ENDIF.                               " IF SY-SUBRC NE 0.

ENDFORM.                               " WRITE_TO_FRONTEND

*----------------------------------------------------------------------*
*  Form  VALIDATE_INPUT                                                *
*----------------------------------------------------------------------*
*  This subroutine is to validate the user input                       *
*----------------------------------------------------------------------*
*  There are no interface parameters to be passed on to the subroutine.*
*----------------------------------------------------------------------*
FORM validate_input .

  IF sy-batch EQ c_flag_on.
    IF s_date IS INITIAL.
      PERFORM fetch_last_exe_details.
    ENDIF.                             " IF S_DATE IS INITIAL.
  ELSE.
    IF sscrfields-ucomm EQ c_onli.
      IF s_vendor IS INITIAL OR s_date IS INITIAL.
        MESSAGE w022.
      ENDIF.                           " IF S_VENDOR IS INITIAL OR ...
    ENDIF.                             " IF SSCRFIELDS-UCOMM EQ C_ONLI
  ENDIF.                               " IF SY-BATCH EQ C_FLAG_ON.


ENDFORM.                               " VALIDATE_INPUT

*----------------------------------------------------------------------*
*  Form  FETCH_LAST_EXE_DETAILS                                        *
*----------------------------------------------------------------------*
*  This subroutine is to fetch the last execution details              *
*----------------------------------------------------------------------*
*  There are no interface parameters to be passed on to the subroutine.*
*----------------------------------------------------------------------*
FORM fetch_last_exe_details .

* local work varibles...................................................
  DATA:
    lv_subrc TYPE sy-subrc.            " SY-SUBRC

  OPEN DATASET gv_input_file FOR INPUT IN TEXT MODE
                                  ENCODING DEFAULT.
  IF sy-subrc NE 0.
* filling the process details for extract log
    PERFORM fill_process_details USING text-uaa.
    gv_status = text-exf.
* LOG file on Application Server.
    PERFORM create_appserver_log.
    MESSAGE e030.
  ENDIF.                               " IF SY-SUBRC NE 0
  DO.
    READ DATASET gv_input_file INTO gs_config_csv.
    lv_subrc = sy-subrc.
    IF lv_subrc NE 0.
      EXIT.
    ENDIF.                             " IF SY-SUBRC NE 0
    SPLIT gs_config_csv AT c_comma
                      INTO gs_last_exe-mode
                           gs_last_exe-value.
    APPEND gs_last_exe TO gt_last_exe.
    CLEAR gs_last_exe.
  ENDDO.                               " READ DATASET GV_CONFIG_FILE

  CLOSE DATASET gv_input_file.
ENDFORM.                               " FETCH_LAST_EXE_DETAILS

*----------------------------------------------------------------------*
*  Form  FILL_INPUTS_BACKGROUND                                        *
*----------------------------------------------------------------------*
*  This subroutine is to fill the inputs but last time execution inputs*
*----------------------------------------------------------------------*
*  There are no interface parameters to be passed on to the subroutine.*
*----------------------------------------------------------------------*
FORM fill_inputs_background .

  READ TABLE gt_last_exe INTO gs_last_exe
                     WITH KEY mode = c_date.
  IF sy-subrc EQ 0.
    gv_last_date = gs_last_exe-value.
  ENDIF.                               " IF SY-SUBRC EQ 0.

  READ TABLE gt_last_exe INTO gs_last_exe
                     WITH KEY mode = c_time.
  IF sy-subrc EQ 0.
    gv_last_time = gs_last_exe-value.
    gv_last_time = gv_last_time + 1.
  ENDIF.                               " IF SY-SUBRC EQ 0.

ENDFORM.                               " FILL_INPUTS_BACKGROUND

*----------------------------------------------------------------------*
*  Form  SAVE_SELECTION_INPUTS                                         *
*----------------------------------------------------------------------*
*  This subroutine is to modify or fill the inputs to a file           *
*----------------------------------------------------------------------*
*  There are no interface parameters to be passed on to the subroutine.*
*----------------------------------------------------------------------*
FORM save_selection_inputs .

* converting the data into csv format
  PERFORM convert_outbound_to_csv USING gt_last_exe
                               CHANGING gt_config_csv.
  OPEN DATASET gv_input_file FOR OUTPUT IN TEXT MODE
                                   ENCODING DEFAULT.
  IF sy-subrc NE 0.
* filling the process details for extract log
    PERFORM fill_process_details USING text-una.
    gv_status = text-exf.
* LOG file on Application Server.
    PERFORM create_appserver_log.
    MESSAGE e024.
  ENDIF.                               " IF SY-SUBRC NE 0
  LOOP AT gt_config_csv INTO gs_config_csv.
    TRANSFER gs_config_csv TO gv_input_file.
  ENDLOOP.                             " LOOP AT GT_CONFIG_CSV INTO ...

  CLOSE DATASET gv_input_file.

ENDFORM.                               " SAVE_SELECTION_INPUTS

*----------------------------------------------------------------------*
*  Form  INSERT_RANGE                                                  *
*----------------------------------------------------------------------*
*  This subroutine is to fill the vendors range table                  *
*----------------------------------------------------------------------*
*  There are no interface parameters to be passed on to the subroutine.*
*----------------------------------------------------------------------*
FORM insert_range  USING  iv_signopt TYPE c
                          iv_low     TYPE any
                          iv_high    TYPE any
                 CHANGING ct_range  TYPE table.
  FIELD-SYMBOLS:
    <range>   TYPE ANY,                " Range
    <sign>    TYPE ANY,                " Sign
    <option>  TYPE ANY,                " Option
    <low>     TYPE ANY,                " Low value
    <high>    TYPE ANY.                " High value

  DATA:
    lv_ref    TYPE REF TO data.        " data

  CHECK NOT ( iv_signopt IS INITIAL AND
              iv_low     IS INITIAL AND
              iv_high    IS INITIAL ).

  CREATE DATA lv_ref LIKE LINE OF ct_range.
  ASSIGN lv_ref->* TO <range>.
  CHECK sy-subrc = 0.
  ASSIGN COMPONENT 'SIGN' OF STRUCTURE <range> TO <sign>.
  CHECK sy-subrc = 0.
  ASSIGN COMPONENT 'OPTION' OF STRUCTURE <range> TO <option>.
  CHECK sy-subrc = 0.
  ASSIGN COMPONENT 'LOW' OF STRUCTURE <range> TO <low>.
  CHECK sy-subrc = 0.
  ASSIGN COMPONENT 'HIGH' OF STRUCTURE <range> TO <high>.
  CHECK sy-subrc = 0.
  <sign>    = iv_signopt(1).
  <option>  = iv_signopt+1(2).
  <low>     = iv_low.
  <high>    = iv_high.

  READ TABLE ct_range
    WITH KEY table_line = <range>
    BINARY SEARCH
    TRANSPORTING NO FIELDS.

  CHECK sy-subrc  <> 0.
  INSERT <range> INTO ct_range INDEX sy-tabix.

ENDFORM.                               " insert_range

*----------------------------------------------------------------------*
*  Form  FILL_VENDORS_BY_BALANCE                                       *
*----------------------------------------------------------------------*
*  This subroutine is to fill the vendors range table by checking lfc1 *
*  balances                                                            *
*----------------------------------------------------------------------*
*  There are no interface parameters to be passed on to the subroutine.*
*----------------------------------------------------------------------*
FORM fill_vendors_by_balance.

  DATA:
    lv_lifnr TYPE lfa1-lifnr,          " Vendor number
    lt_lfc1 TYPE STANDARD TABLE OF lfc1,
                                       " LFC1 table
    ls_lfc1 LIKE LINE OF lt_lfc1,      " Field string of type lfc1
    lv_umsav TYPE lfc1-umsav,          " Amount
    lv_gjahr TYPE gjahr,               " Fiscal year
    lv_string TYPE string.             " String

  CALL FUNCTION 'FKK_FM_GET_FISCAL_YEAR'
    EXPORTING
      i_bukrs = s_ccode-low
      i_budat = sy-datum
    IMPORTING
      e_gjahr = lv_gjahr.

  SELECT * INTO TABLE lt_lfc1 FROM lfc1 WHERE lifnr IN s_vendor
                                          AND bukrs IN s_ccode
                                          AND gjahr EQ lv_gjahr.
  IF lt_lfc1 IS NOT INITIAL.

    LOOP AT lt_lfc1 INTO ls_lfc1.

      CLEAR lv_umsav.

      lv_umsav = ls_lfc1-umsav +
                 ls_lfc1-um01s +
                 ls_lfc1-um02s +
                 ls_lfc1-um03s +
                 ls_lfc1-um04s +
                 ls_lfc1-um05s +
                 ls_lfc1-um06s +
                 ls_lfc1-um07s +
                 ls_lfc1-um08s +
                 ls_lfc1-um09s +
                 ls_lfc1-um10s +
                 ls_lfc1-um11s +
                 ls_lfc1-um12s +
                 ls_lfc1-um13s +
                 ls_lfc1-um14s +
                 ls_lfc1-um15s +
                 ls_lfc1-um16s -
                 ls_lfc1-um01h -
                 ls_lfc1-um02h -
                 ls_lfc1-um03h -
                 ls_lfc1-um04h -
                 ls_lfc1-um05h -
                 ls_lfc1-um06h -
                 ls_lfc1-um07h -
                 ls_lfc1-um08h -
                 ls_lfc1-um09h -
                 ls_lfc1-um10h -
                 ls_lfc1-um11h -
                 ls_lfc1-um12h -
                 ls_lfc1-um13h -
                 ls_lfc1-um14h -
                 ls_lfc1-um15h -
                 ls_lfc1-um16h.
      IF lv_umsav LT 0.

*        lv_lifnr = ls_lfc1-lifnr.
        CLEAR lv_lifnr.

        SELECT SINGLE
               lifnr
          FROM lfa1
          INTO lv_lifnr
         WHERE lifnr EQ ls_lfc1-lifnr
           AND loevm NE c_flag_on.

        IF sy-subrc EQ 0.

          CLEAR lv_lifnr.

          SELECT SINGLE
                 lifnr
            FROM lfb1
            INTO lv_lifnr
           WHERE lifnr EQ ls_lfc1-lifnr
             AND zahls EQ space.

          IF sy-subrc EQ 0.

* preparing vendor range table
            PERFORM insert_range USING 'IEQ' lv_lifnr ''
                              CHANGING gr_vendor.

          ENDIF.

        ENDIF.

      ENDIF.                           " IF LV_UMSAV LT 0.

    ENDLOOP.                             " LOOP AT LT_LFC1 INTO LS_LFC1.

    IF gr_vendor IS INITIAL.

      lv_string = text-fpd.

*   filling the process details for extract log
      PERFORM fill_process_details USING lv_string.
      CLEAR lv_string.
      gv_status = text-fpd.

*   LOG file on Application Server.
      PERFORM create_appserver_log.

      MESSAGE i032.
      LEAVE PROGRAM.

    ENDIF.

  ELSE.

    lv_string = text-fpd.

* filling the process details for extract log
    PERFORM fill_process_details USING lv_string.
    CLEAR lv_string.
    gv_status = text-fpd.

* LOG file on Application Server.
    PERFORM create_appserver_log.

    MESSAGE i032.
    LEAVE PROGRAM.

  ENDIF.                               " IF LT_LFC1 IS NOT INITIAL.
ENDFORM.                               " FILL_VENDORS_BY_BALANCE

*----------------------------------------------------------------------*
*  Form  ZTERM_HELP_LOW                                                *
*----------------------------------------------------------------------*
*  This subroutine is for F4 help for low                              *
*----------------------------------------------------------------------*
*  There are no interface parameters to be passed on to the subroutine.*
*----------------------------------------------------------------------*

FORM zterm_help_low .
  CALL FUNCTION 'FI_F4_ZTERM'
    EXPORTING
      i_koart       = ' '
      i_zterm       = ' '
      i_xshow       = ' '
      i_ztype       = ' '
    IMPORTING
      e_zterm       = s_pterm-low
    EXCEPTIONS
      nothing_found = 1
      OTHERS        = 2.
  IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

ENDFORM.                    " ZTERM_HELP_LOW
*----------------------------------------------------------------------*
*  Form  ZTERM_HELP_HIGH                                                *
*----------------------------------------------------------------------*
*  This subroutine is for F4 help for low                              *
*----------------------------------------------------------------------*
*  There are no interface parameters to be passed on to the subroutine.*
*----------------------------------------------------------------------*
FORM zterm_help_high .
  CALL FUNCTION 'FI_F4_ZTERM'
    EXPORTING
      i_koart       = ' '
      i_zterm       = ' '
      i_xshow       = ' '
      i_ztype       = ' '
    IMPORTING
      e_zterm       = s_pterm-high
    EXCEPTIONS
      nothing_found = 1
      OTHERS        = 2.
  IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.
ENDFORM.                    " ZTERM_HELP_HIGH
